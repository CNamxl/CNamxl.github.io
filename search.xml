<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每天5分钟了解现代C++新特性(C11)</title>
      <link href="/2023/09/10/C-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/09/10/C-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-新基础类型"><a href="#第一章-新基础类型" class="headerlink" title="第一章 新基础类型"></a>第一章 新基础类型</h1><h2 id="整数类型longlong"><a href="#整数类型longlong" class="headerlink" title="整数类型longlong"></a>整数类型longlong</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自变量后缀可以是大写也可以是小写</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x = <span class="number">65536ll</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> y = <span class="number">65536ull</span>;</span><br><span class="line"><span class="comment">//判断最大最小值</span></span><br><span class="line"><span class="comment">// std::numeric_limits&lt;long long&gt;</span></span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;std::numeric_limits&lt;long long&gt;::max()=&quot;</span>&lt;&lt;std::numeric_limits&lt;<span class="type">long</span> <span class="type">long</span>&gt;::<span class="built_in">max</span>()&lt;&lt;std::endl;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;std::numeric_limits&lt;long long&gt;::min()=&quot;</span>&lt;&lt;std::numeric_limits&lt;<span class="type">long</span> <span class="type">long</span>&gt;::<span class="built_in">min</span>()&lt;&lt;std::endl;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;std::numeric_limits&lt;long long&gt;::max()=&quot;</span>&lt;&lt;std::numeric_limits&lt;<span class="type">long</span> <span class="type">long</span>&gt;::<span class="built_in">max</span>()&lt;&lt;std::endl;</span><br></pre></td></tr></table></figure><h2 id="char16-t-和-char32-t"><a href="#char16-t-和-char32-t" class="headerlink" title="char16_t 和 char32_t"></a>char16_t 和 char32_t</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="type">char16_t</span> utf16c = <span class="string">u&#x27;好&#x27;</span>;</span><br><span class="line"><span class="type">char32_t</span> utf32c = <span class="string">U&#x27;好&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char16_t</span> utf16[] = <span class="string">u&quot;你好世界！&quot;</span>;</span><br><span class="line"><span class="type">char32_t</span> utf32[] = <span class="string">U&quot;你好世界！&quot;</span>;</span><br><span class="line"><span class="comment">//wchar_t</span></span><br><span class="line"><span class="comment">//Windows /编程常用的字符类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> <span class="type">wchar_t</span>* LPCWSTR;</span><br><span class="line"><span class="function">BOOL <span class="title">PathFileExistsW</span><span class="params">(LPCWSTR pszPath)</span></span>;</span><br><span class="line"><span class="comment">//char8_t</span></span><br><span class="line"><span class="type">char</span> str[] = <span class="string">u8&quot;test&quot;</span>; <span class="comment">//C++17编译成功；C++20编译失败，需要char8_t</span></span><br><span class="line"><span class="type">char</span> c = <span class="string">u8&#x27;C&#x27;</span>;</span><br><span class="line"><span class="type">char8_t</span> c8a[] = <span class="string">&quot;test&quot;</span>; <span class="comment">//C++20编译失败，需要char</span></span><br><span class="line"><span class="type">char8_t</span> c8 = <span class="string">&#x27;C&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="第2章-内联和嵌套命名空间"><a href="#第2章-内联和嵌套命名空间" class="headerlink" title="第2章 内联和嵌套命名空间"></a>第2章 内联和嵌套命名空间</h1>]]></content>
      
      
      <categories>
          
          <category> C++编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#代码精粹</title>
      <link href="/2023/09/04/C-%E4%BB%A3%E7%A0%81%E7%B2%BE%E7%B2%B9/"/>
      <url>/2023/09/04/C-%E4%BB%A3%E7%A0%81%E7%B2%BE%E7%B2%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ArreyList"><a href="#ArreyList" class="headerlink" title="ArreyList"></a>ArreyList</h1><ol><li>请简述ArreyList和数组的区别<br>ArreyList本质上是一个object数组的封装<br>区别：<br>(1)而数组在使用时候需要定长，ArreyList可以一开始就不用定长。<br>(2)数组可以指定存储类型，ArreyList默认为object类型。<br>(3)数组的增删需要我们自己去实现，Arraylist帮我们封装好了方便使用的API。<br>(4)数组只要不是object就不存在装箱拆箱，而ArrayList存在。<br>(5)数组长度为Length，ArrayList长度为Count。</li><li>创建一个背包类，使用ArrayList存储物品，实现购买物品，卖出物品，显示物品功能，买入或卖出物品会导致金钱变化<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Reflection.Metadata.Ecma335;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">C__01</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> price;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Item</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">int</span> price, <span class="built_in">int</span> number</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">backPack</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ArrayList items;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> money;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">backPack</span>(<span class="params"><span class="built_in">int</span> money</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.items = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">this</span>.money = money;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyItems</span>(<span class="params">Item item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.id &lt;= <span class="number">0</span> || item.price &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Item Doesn&#x27;t Exist！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果钱不够直接跳出</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.money &lt; item.price * item.number)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Need More Cash!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//花钱并打印信息</span></span><br><span class="line">            money = money - (item.price * item.number);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;购买&#123;0&#125;&#123;1&#125;个花费&#123;2&#125;钱&quot;</span>, item.name, item.number, item.price * item.number);</span><br><span class="line">            <span class="keyword">if</span> (items.Count == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                items.Add(item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//遍历添加物品</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= items.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//如果已经存在，叠加物品</span></span><br><span class="line">                    <span class="keyword">if</span> ((items[i] <span class="keyword">as</span> Item).id == item.id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        (items[i] <span class="keyword">as</span> Item).number += item.number;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//否则添加新物品</span></span><br><span class="line">                    <span class="keyword">if</span> ((items[i] <span class="keyword">as</span> Item).id != item.id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        items.Add(item);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellItems</span>(<span class="params">Item item</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; items.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((items[j] <span class="keyword">as</span> Item).id == item.id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((items[j] <span class="keyword">as</span> Item).number &gt; item.number)</span><br><span class="line">                        &#123;</span><br><span class="line">                            num = item.number;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            num = (items[j] <span class="keyword">as</span> Item).number;</span><br><span class="line">                            items.RemoveAt(j);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">int</span> sellMoney = (<span class="built_in">int</span>)(item.price * item.number * <span class="number">0.8f</span>);</span><br><span class="line">                        money = money + sellMoney;</span><br><span class="line"></span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;卖了&#123;0&#125;&#123;1&#125;个，赚了&#123;2&#125;元&quot;</span>, item.name, item.number, sellMoney);</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;还剩&#123;0&#125;元&quot;</span>, <span class="keyword">this</span>.money);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Item item;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; items.Count; index++)</span><br><span class="line">                &#123;</span><br><span class="line">                    item = items[index] <span class="keyword">as</span> Item;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;有&#123;0&#125;&#123;1&#125;个&quot;</span>, item.name, item.number);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;有&#123;0&#125;钱&quot;</span>, <span class="keyword">this</span>.money);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                backPack bag = <span class="keyword">new</span> backPack(<span class="number">10000</span>);</span><br><span class="line">                Item Throwingknife = <span class="keyword">new</span> Item(<span class="number">1</span>, <span class="string">&quot;Throwingknife&quot;</span>, <span class="number">50</span>, <span class="number">5</span>);</span><br><span class="line">                Item bullets = <span class="keyword">new</span> Item(<span class="number">2</span>, <span class="string">&quot;Bullets&quot;</span>, <span class="number">100</span>, <span class="number">3</span>);</span><br><span class="line">                Item Armor = <span class="keyword">new</span> Item(<span class="number">3</span>, <span class="string">&quot;Armor&quot;</span>, <span class="number">1000</span>, <span class="number">1</span>);</span><br><span class="line">                Item TTI2011 = <span class="keyword">new</span> Item(<span class="number">4</span>, <span class="string">&quot;Pistol&quot;</span>, <span class="number">7000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                bag.buyItems(Armor);</span><br><span class="line">                bag.buyItems(Throwingknife);</span><br><span class="line">                bag.buyItems(TTI2011);</span><br><span class="line">                bag.buyItems(bullets);</span><br><span class="line">                Console.WriteLine(bag.items.Count);</span><br><span class="line">                bag.sellItems(Throwingknife);</span><br><span class="line">                bag.showItems();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C#编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#进阶</title>
      <link href="/2023/09/04/C-%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/09/04/C-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、C-简单数据结构类"><a href="#一、C-简单数据结构类" class="headerlink" title="一、C#简单数据结构类"></a>一、C#简单数据结构类</h1><h2 id="1-ArrayList-数组表"><a href="#1-ArrayList-数组表" class="headerlink" title="1.ArrayList(数组表)"></a>1.ArrayList(数组表)</h2><h3 id="知识点一-ArrayList的本质"><a href="#知识点一-ArrayList的本质" class="headerlink" title="知识点一 ArrayList的本质"></a>知识点一 ArrayList的本质</h3><p>ArrayList是一个C#为我们封装好的类<br>它的本质是一个object类型的数组(可以存储任何对象)<br>ArreyList帮我们封装好了数组的增删查改</p><h3 id="知识点二-申明"><a href="#知识点二-申明" class="headerlink" title="知识点二 申明"></a>知识点二 申明</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要 using System.Collections;</span></span><br><span class="line">ArrayList array = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure><h3 id="知识点三-增删查改"><a href="#知识点三-增删查改" class="headerlink" title="知识点三 增删查改"></a>知识点三 增删查改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a><code>增</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内容增加</span></span><br><span class="line">array.Add(<span class="number">1</span>);</span><br><span class="line">array.Add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">array.Add(<span class="literal">true</span>);</span><br><span class="line">array.Add(<span class="keyword">new</span> <span class="built_in">object</span>());</span><br><span class="line">array.Add(<span class="keyword">new</span> Test());</span><br><span class="line">array.Add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//范围增加(把另一个arraylist接在后面)</span></span><br><span class="line">ArrayList array2 = <span class="keyword">new</span> ArreyList();</span><br><span class="line">array.AddRange(array2);</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">array.Insert(<span class="built_in">int</span> index,<span class="built_in">object</span>? <span class="keyword">value</span> );</span><br><span class="line">array.Insert(<span class="number">1</span>,<span class="string">&quot;999&quot;</span>);<span class="comment">//在索引为一的地方插入字符串999</span></span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a><code>删</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会删掉数组里的第一个出现的括号内的元素</span></span><br><span class="line">array.Remove(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//移除指定位置的元素</span></span><br><span class="line">array.RemoveAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">array.clear();</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a><code>查</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到指定位置的元素(和数组相同的引用方式)</span></span><br><span class="line">Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//查看元素是否存在(返回值为bool)</span></span><br><span class="line"><span class="keyword">if</span>(array.Contains(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(<span class="string">&quot;123 exist!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正向查找元素位置</span></span><br><span class="line"><span class="comment">//找到的返回值 是位置，找不到 返回值 是 -1</span></span><br><span class="line"><span class="built_in">int</span> index = array.IndexOf(ture);</span><br><span class="line">Console.WriteLine(index); <span class="comment">//返回首个非空值位置</span></span><br><span class="line">Console.WriteLine(array.IndexOf(<span class="literal">false</span>)); <span class="comment">//返回-1</span></span><br><span class="line"><span class="comment">//反向查找元素位置</span></span><br><span class="line"><span class="comment">//返回时从头开始的索引数</span></span><br><span class="line">index = array.LastIndexOf(<span class="literal">true</span>);</span><br><span class="line">Console.WriteLine(index);</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a><code>改</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给指定位置赋值</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="string">&quot;999&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><code>遍历</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//长度</span></span><br><span class="line">Console.WriteLine(array.Count);</span><br><span class="line"><span class="comment">//容量</span></span><br><span class="line"><span class="comment">//避免产生过多垃圾，每超过容量一次容量翻倍</span></span><br><span class="line">Console.WriteLine(array.Capacity);</span><br><span class="line"><span class="comment">//for循环遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i;i &lt; array.Count;i++)</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器遍历</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">object</span> item <span class="keyword">in</span> array)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点四-装箱拆箱"><a href="#知识点四-装箱拆箱" class="headerlink" title="知识点四 装箱拆箱"></a>知识点四 装箱拆箱</h3><p>ArrayList本质上是一个可以自动扩容的object数组。<br>由于用万物之父来存储数据，自然就存在装箱拆箱。<br>当往其中进行值类型存储时就是在装箱，当将值类型对象取出来使用时，就存在拆箱。<br>所以ArreyList尽量少用，尽量用更好的数据容器(stack和heap内存相互转换)<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = <span class="number">1</span>;</span><br><span class="line">array[<span class="number">0</span>] = num; <span class="comment">//装箱</span></span><br><span class="line">num = (<span class="built_in">int</span>)array[<span class="number">0</span>]; <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure></p><h2 id="2-Stack-栈"><a href="#2-Stack-栈" class="headerlink" title="2.Stack(栈)"></a>2.Stack(栈)</h2><h3 id="知识点一-Stack的本质"><a href="#知识点一-Stack的本质" class="headerlink" title="知识点一 Stack的本质"></a>知识点一 Stack的本质</h3><p>Stack(栈)同样是C#为我们封装好的一个类,同样是一个有object类组成的数组,但是封装了独特的进出规则，具体情况可以参考手枪的单排弹匣</p><h3 id="知识点二-Stack的声明"><a href="#知识点二-Stack的声明" class="headerlink" title="知识点二 Stack的声明"></a>知识点二 Stack的声明</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要 using System.Collections;</span></span><br><span class="line">Stack stack = <span class="keyword">new</span> Stack();</span><br></pre></td></tr></table></figure><h3 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="知识点四"><a href="#知识点四" class="headerlink" title="知识点四"></a>知识点四</h3><h3 id="知识点五"><a href="#知识点五" class="headerlink" title="知识点五"></a>知识点五</h3><h2 id="3-Queue-队列"><a href="#3-Queue-队列" class="headerlink" title="3.Queue(队列)"></a>3.Queue(队列)</h2><h2 id="4-Hashtable-哈希表"><a href="#4-Hashtable-哈希表" class="headerlink" title="4.Hashtable(哈希表)"></a>4.Hashtable(哈希表)</h2>]]></content>
      
      
      <categories>
          
          <category> C#编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git与Github——从入门到入土》</title>
      <link href="/2023/07/22/git%20and%20github/"/>
      <url>/2023/07/22/git%20and%20github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>封面画师：匣子<br>文章部分描述节选自知乎和他人博客。</p></div><h1 id="一、Git-Bash"><a href="#一、Git-Bash" class="headerlink" title="一、Git Bash"></a>一、Git Bash</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li>配置命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>查看命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure><h2 id="Git-连接至-Github"><a href="#Git-连接至-Github" class="headerlink" title="Git 连接至 Github"></a>Git 连接至 Github</h2></li><li>在Git Bash中执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>之后打开C盘下用户(User)文件夹下的.ssh的文件夹，会看到 id_rsa(私钥)和id_rsa.pub(公钥)</li><li>用记事本打开上述图片中的公钥（id_rsa.pub），复制里面的内容，然后开始在github中配置ssh密钥。</li><li>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。</li><li>测试连接，输入以下命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。<h2 id="如何使用Git拉取Github仓库中的代码"><a href="#如何使用Git拉取Github仓库中的代码" class="headerlink" title="如何使用Git拉取Github仓库中的代码"></a>如何使用Git拉取Github仓库中的代码</h2></li></ol><h1 id="二、Git-GUI"><a href="#二、Git-GUI" class="headerlink" title="二、Git GUI"></a>二、Git GUI</h1><h1 id="三、Github"><a href="#三、Github" class="headerlink" title="三、Github"></a>三、Github</h1>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTS程序设计三大工作口诀</title>
      <link href="/2023/07/21/DOTS%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BD%9C%E5%8F%A3%E8%AF%80/"/>
      <url>/2023/07/21/DOTS%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BD%9C%E5%8F%A3%E8%AF%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>作者：Metaverse大衍神君<br>文章摘自bilibili网站:<a href="https://www.bilibili.com/read/cv25049395?from=search&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/read/cv25049395?from=search&amp;spm_id_from=333.337.0.0</a></p></div><p>DOTS程序设计三大工作口诀<br>设计总在编码前，资源数据不能团，Hybrid,Pure分清楚，想要高效一样难。</p><p>组件要分非与托, Aspect炒一锅，数据划分动与静，结构对齐才干净。</p><p>查询多时用Job，查询少时用Query，随机访问莫滥用，其他方式可不用。</p><p>简单数据CSD，复杂数据封进A，遍历查询定读写，一次查询免间随。</p><p>隐式关系摆前提，更新频率改粒度，结构变化应尽免，通用设计最清楚。</p><p>数据转换看成本，并行串行与同步，读写关系选工具，拥抱迭代才最酷。</p><p>详细解释版本：</p><p>设计总在编码前，资源数据不能团（堆在一起），Hybrid,Pure（模式）分清楚，想要高效一样难。</p><p>组件要分非（托管）与托（管）, Aspect炒一锅（封在一起），数据划分动（态）与静（态），结构对齐才干净（内存/Catch line不浪费）。</p><p>查询多时用Job，查询少时用Query(SystemAPI.Query)，随机访问莫滥用，其他方式可不用(lamda foreach 和手动遍历entitymanger.getallentities)。</p><p>简单数据CSD(Component,ShareComponent, DynamicBuffer)，复杂数据封进A(Aspect)，遍历查询定读写，一次查询免间（接访问）随（机访问）。</p><p>隐式关系摆前提，更新频率改粒度（数据组件拆分粒度），结构变化（Structural Change）应尽免（尽量避免），通用设计最清楚。</p><p>数据转换看成本，并行串行（Job链）与同步（同步点），读写关系选工具，拥抱迭代才最酷。</p><p> 作者：Metaverse大衍神君 </p>]]></content>
      
      
      <categories>
          
          <category> DOTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> “Unity” </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「后日谈」型月Fate系列中与计算机科学/电子信息工程有关的英灵</title>
      <link href="/2023/07/20/%E8%8B%B1%E7%81%B5/"/>
      <url>/2023/07/20/%E8%8B%B1%E7%81%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>本文素材来自于互联网，封面画师Mika Pikazo，这种画风很难不爱ああああああ…</p></div><h1 id="前言——————关于型月Fate系列"><a href="#前言——————关于型月Fate系列" class="headerlink" title="前言——————关于型月Fate系列"></a>前言——————关于型月Fate系列</h1><p>TYPE-MOON原作的系列作品<br>Fate（フェイト）是TYPE-MOON原作的系列作品，于2004年1月30日发售的PC平台18禁文字冒险游戏《Fate/stay night》，同时也是TYPE-MOON商业化后初次亮相的作品。由于广受欢迎，吸引了一些作家参与制作，由本篇衍生诸多人气作品。</p><h1 id="尼古拉·特斯拉-我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家"><a href="#尼古拉·特斯拉-我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家" class="headerlink" title="尼古拉·特斯拉(我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家)"></a>尼古拉·特斯拉(我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家)</h1><p>尼古拉·特斯拉，塞尔维亚裔美国人，美国著名发明家、电气工程师、机械工程师。特斯拉是电气时代电力商业化的重要推进者，主持设计了交流电供发电系统。他是发明了交流发电和供电系统的天才发明家，一生致力于不断的研究，并取得约1000个专利。此外，他也是现代电学、无线通信学的奠基人之一。<br>在TYPE-MOON推出的安卓&amp;iOS游戏《Fate/Grand Order》中，职阶为Archer，宝具为对城宝具——人类神话·雷电降临。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">现实世界中40岁时的特斯拉</button></li><li class="tab"><button type="button" data-href="#test1-2">FGO中的特斯拉</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>0b46f21fbe096b63f624e721ad7b9044ebf81a4c0623.webp</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>4e4a20a4462309f790521a9cd3581bf3d7ca7acb78bc.webp</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="现实概况"><a href="#现实概况" class="headerlink" title="现实概况"></a>现实概况</h2><div class="table-container"><table><thead><tr><th>条目</th><th>数据</th></tr></thead><tbody><tr><td>中文名</td><td>尼古拉·特斯拉</td></tr><tr><td>本名</td><td>Nikola Tesla</td></tr><tr><td>国籍</td><td>美国</td></tr><tr><td>民族</td><td>塞尔维亚人</td></tr><tr><td>出身地区</td><td>奥地利帝国-斯米良（今克罗地亚）</td></tr><tr><td>活动范围</td><td>奥地利（早年）</td></tr><tr><td></td><td>美国（1884年以后）</td></tr><tr><td>出生日期</td><td>1856年7月10日</td></tr><tr><td>逝世日期</td><td>1943年1月7日</td></tr><tr><td>毕业院校</td><td>格拉茨理工大学（实际未毕业）</td></tr><tr><td>代表作</td><td>《My Inventions》《The Dynamic Theory of Gravity》</td></tr><tr><td>主要成就</td><td>交流电系统、无线电系统、无线电能传输、放大发射机</td></tr></tbody></table></div><h2 id="游戏设定"><a href="#游戏设定" class="headerlink" title="游戏设定"></a>游戏设定</h2><div class="table-container"><table><thead><tr><th>FGO游戏设定</th><th>数据</th></tr></thead><tbody><tr><td>中文名</td><td>尼古拉·特斯拉</td></tr><tr><td>外文名</td><td>ニコラ・テスラ，Nikola Tesla</td></tr><tr><td>别  名</td><td>祖师爷、钢铁侠、磁暴步兵</td></tr><tr><td>配  音</td><td>稻田彻</td></tr><tr><td>性  别</td><td>男</td></tr><tr><td>登场作品</td><td>《Fate/Grand Order》</td></tr><tr><td>身    高</td><td>190 cm</td></tr><tr><td>体    重</td><td>80 kg</td></tr><tr><td>职    阶</td><td>Archer</td></tr><tr><td>属    性</td><td>混沌·善</td></tr><tr><td>地    域</td><td>欧洲</td></tr><tr><td>出    处</td><td>史实</td></tr><tr><td>星    数</td><td>5</td></tr></tbody></table></div><p>操控电磁的19、20世纪的天才科学家。毫不含蓄的天才，宣称甚至能斩断星辰。解开了在众多的神话中，被誉为神（自然）之传说的雷电的秘密，给人类文明带来“电力”的伟大学者之一。</p><h2 id="现实中的尼古拉·特斯拉"><a href="#现实中的尼古拉·特斯拉" class="headerlink" title="现实中的尼古拉·特斯拉"></a>现实中的尼古拉·特斯拉</h2><p>年轻时的特斯拉非常的聪明，可以在脑子中飞快地完成复杂计算，老师总认为他在作弊。他能流利地说多种语言。除了克罗地亚语外，他还会说7种语言：捷克语、英语、法语、德语、匈牙利语、意大利语、拉丁语。<br>1893年他展示了小规模无线通讯，并成为了电流之战的赢家之后，就成为了美国最伟大的电子工程师之一而备受尊敬。许多他早期的成果变成现代电子工程的先驱，而且他的许多发现极具开创性和重要性。在公元1943年，美国最高法院承认他为无线电的发明者。以他名字而命名的磁感应强度单位（1 Tesla = 1 Newton / (Amp · Meter) = 10,000 Gauss）更表明他在磁学上的贡献。<br>交流发电机的发明者即是特斯拉，而他除了在电力方面作出了杰出的成就之外，在其他方面的成就也相当惊人。1895年，他与威斯汀豪斯替美国尼亚加拉发电站制造发电机组；1898年，他制造出世界上第一艘无线电遥控船，无线电遥控技术取得专利。这位古怪的发明家还发明了荧光灯、遥控装置、可调机械振动装置、短距离无线电输电装置等。特斯拉开始推理关于用电和磁翘曲空间和时间的可能性，并且想使其能被人们所控制。<br>特斯拉从不在意他的财务状况。如果特斯拉不是被迫放弃了交流电的专利权供世人免费使用（每马力$2.53），那他将会是世界上最富有的人，但他的梦想就是给世界提供用之不竭的能源。他病逝时穷困无依，享年86岁。<br>尼古拉·特斯拉把他的一生都投入到了电磁学的研究。没有尼古拉·特斯拉，科学怪人的形象可能不会像今天这样闪耀。</p><h1 id="查尔斯·巴贝奇（）"><a href="#查尔斯·巴贝奇（）" class="headerlink" title="查尔斯·巴贝奇（）"></a>查尔斯·巴贝奇（）</h1><p>在TYPE-MOON推出的安卓&amp;iOS游戏《Fate/Grand Order》中，职阶为Caster。<br>性格严肃，不擅长应付无邪或是聪明的少女，宝具为绚烂的灰烬世界（Dimension of Steam）</p><h2 id="现实概况-1"><a href="#现实概况-1" class="headerlink" title="现实概况"></a>现实概况</h2><p>中文名查尔斯·巴贝奇外文名Charles Babbage国    籍英国出生日期1791年12月26日逝世日期1871年10月18日毕业院校剑桥大学职    业数学家代表作品《各种人寿保险机构的比较观点》</p><div class="table-container"><table><thead><tr><th>条目</th><th>数据</th></tr></thead><tbody><tr><td>中文名</td><td>查尔斯·巴贝奇</td></tr><tr><td>本名</td><td>Charles Babbage</td></tr><tr><td>国际</td><td>英国</td></tr><tr><td>出身地区</td><td>英格兰-托特纳斯</td></tr><tr><td>活动范围</td><td></td></tr><tr><td>出生日期</td><td>1791年12月26日</td></tr><tr><td>逝世日期</td><td>1871年10月18日</td></tr><tr><td>毕业院校</td><td>剑桥大学</td></tr><tr><td>职业</td><td>数学家</td></tr><tr><td>代表作品</td><td>《各种人寿保险机构的比较观点》</td></tr><tr><td>主要成就</td></tr></tbody></table></div><h2 id="游戏设定-1"><a href="#游戏设定-1" class="headerlink" title="游戏设定"></a>游戏设定</h2><div class="table-container"><table><thead><tr><th>FGO游戏设定</th><th>数据</th></tr></thead><tbody><tr><td>中文名</td><td>查尔斯·巴贝奇</td></tr><tr><td>外文名</td><td>チャールズ・バベッジ，Charles Babbage</td></tr><tr><td>别  名</td><td>铁皮,机器人,蒸汽王,高达</td></tr><tr><td>配  音</td><td>稻田彻</td></tr><tr><td>性  别</td><td>男</td></tr><tr><td>登场作品</td><td>《Fate/Grand Order》</td></tr><tr><td>身    高</td><td>250 cm</td></tr><tr><td>体    重</td><td>500kg以上</td></tr><tr><td>职    阶</td><td>Caster</td></tr><tr><td>属    性</td><td>混沌·中庸</td></tr><tr><td>地    域</td><td>欧洲</td></tr><tr><td>出    处</td><td>史实</td></tr><tr><td>星    数</td><td>3</td></tr><tr><td>画    师</td><td>I-Ⅳ</td></tr></tbody></table></div><p>十九世纪的数学家、科学家。<br>梦想着世界变革的蒸汽王。<br>世界上第一个利用蒸汽机关设计出计算机的“差分机”与“分析机”的天才而博学之人。<br>在现代被称为“计算机之父”。<br>——志未成而身先死。<br>差分机没能完成。分析机没能完成。<br>将消亡于时间的夹缝中的“可能的未来”的梦想残留于世，他死去了。<br>而如今，他再度现界。<br>可能的未来，作为异形的钢铁缠绕全身。<br>梦想的未来，作为异形的世界深埋心中。<br>作为英灵现界的他，连同存在本身，都几乎与自己的宝具——固有结界相互同一化。<br>寄予圣杯的愿望是“蒸汽文明世界的到来”。<br>只是，因为现界时便存在于现代的世界，多少获得了一些知识，而逐渐开始认识到这样也不错。<br>对Master而言，他一定是个可以依赖的伙伴吧！</p><h2 id="现实中的查尔斯·巴贝奇"><a href="#现实中的查尔斯·巴贝奇" class="headerlink" title="现实中的查尔斯·巴贝奇"></a>现实中的查尔斯·巴贝奇</h2><p>今天出版的许多计算机书籍扉页里，都登载着这位先生的照片：宽阔的额，狭长的嘴，锐利的目光显得有些愤世嫉俗，坚定的但绝非缺乏幽默的外貌，给人以一种极富深邃思想的学者形象，有人或许知道他的大名──查尔斯·巴贝奇。<br>巴贝奇，1791年12月26日出生在英格兰西南部的托特纳斯，是一位富有的银行家的儿子，后来继承了相当丰厚的遗产，但他把金钱都用于了科学研究。童年时代的巴贝奇显示出极高的数学天赋，考入剑桥大学后，他发现自己掌握的代数知识甚至超过了教师。毕业留校，24岁的年轻人荣幸地受聘担任剑桥“卢卡斯讲座”的数学教授。这是一个很少有人能够获得的殊荣，牛顿的老师巴罗是第一名，牛顿是第二名。假若巴贝奇继续在数学理论领域耕耘，他本来是可以走上鲜花铺就的坦途。然而，这位旷世奇才却选择了一条无人敢于攀登的崎岖险路。<br>事情恐怕还得从法国讲起。18世纪末，法兰西发起了一项宏大的计算工程──人工编制《数学用表》，这在没有先进计算工具的当时，可是件极其艰巨的工作。法国数学界调集大批精兵强将，组成了人工手算的流水线，算得个天昏地暗，才完成了17卷大部头书稿。即便如此，计算出的数学用表仍然存在大量错误。<br>据说有一天，巴贝奇与著名的天文学家赫舍尔凑在一起，对两大部头的天文数表评头论足，翻一页就是一个错，翻两页就有好几双。面对错误百出的数学表，巴贝奇目噔口呆，他甚至喊出声来：“天哪，但愿上帝知道，这些计算错误已经充斥弥漫了整个宇宙！”这件事也许就是巴贝奇萌生研制计算机构想的起因。巴贝奇在他的自传《一个哲学家的生命历程》里，写到了大约发生在1812年的一件事：“有一天晚上，我坐在剑桥大学的分析学会办公室里，神志恍惚地低头看着面前打开的一张对数表。一位会员走进屋来，瞧见我的样子，忙喊道：‘喂！你梦见什么啦？’我指着对数表回答说：‘我正在考虑这些表也许能用机器来计算！’”<br>巴贝奇的第一个目标是制作一台“差分机”，那年他刚满20岁。他从法国人杰卡德发明的提花织布机上获得了灵感，差分机设计闪烁出了程序控制的灵光──它能够按照设计者的旨意，自动处理不同函数的计算过程。1822年，巴贝奇小试锋芒，初战告捷，第一台差分机呱呱坠地。但是，这一“小试”也耗去了整整10年。这是因为当时的工业技术水平极差，从设计绘图到零件加工，都得自己亲自动手。好在巴贝奇自小就酷爱并熟悉机械加工，车钳刨铣磨，样样拿手。在他孤军奋战下造出的这台机器，运算精度达到了6位小数，当即就演算出好几种函数表。以后实际运用证明，这种机器非常适合于编制航海和天文方面的数学用表。“春风得意马蹄疾”。成功的喜悦激励着巴贝奇，他连夜奋笔上书皇家学会，要求政府资助他建造第二台运算精度为20位的大型差分机。英国政府看到巴贝奇的研究有利可图，破天荒地与科学家签订了第一个合同，财政部慷慨地为这台大型差分机提供出1.7万英镑的资助。巴贝奇自己也贴进去1.3万英镑巨款，用以弥补研制经费的不足。在当年，这笔款项的数额无异于天文数字──有关资料介绍说，1831年约翰·布尔制造一台蒸汽机车的费用才784英磅。<br>然而，英国政府和巴贝奇都失了算，第二台差分机在剑桥的“阴沟”里面翻了船！我们可以设身处地替巴贝奇想一想，第二台差分机大约有25000个零件，主要零件的误差不得超过每英寸千分之一，即使用现在的加工设备和技术，要想造出这种高精度的机械也绝非易事。巴贝奇把差分机交给了英国最著名的机械工程师约瑟夫·克莱门特所属的工厂制造，但工程进度十分缓慢。设计师心急火燎，从剑桥到工厂，从工厂到剑桥，一天几个来回。他把图纸改了又改，让工人把零件重做一遍又一遍。年复一年，日复一日，直到又一个10年过去后，巴贝奇依然望着那些不能运转的机器发愁，全部零件亦只完成不足一半数量。参加试验的同事们再也坚持不下去，纷纷离他而去如鸟兽散。巴贝奇独自苦苦支撑了第三个10年，终于感到自己再也无力回天。那天清晨，巴贝奇蹒跚走进车间。偌大的作业场空无一人，只剩下满地的滑车和齿轮，四处一片狼籍。他呆立在尚未完工的机器旁，深深地叹了口气，终于“怆然而涕下”。在痛苦的煎熬中，他无计可施，只得把全部设计图纸和已完成的部分零件送进伦敦皇家学院博物馆供人观赏。<br>1842年，在巴贝奇的一生中是极不平常的一年。那年冬天，伦敦的气候格外寒冷，巴贝奇的身心全都冷得发颤。英国政府宣布断绝对他的一切资助，连科学界的友人都用一种怪异的目光看着他。英国首相讥讽道：“这部机器的唯一用途，就是花掉大笔金钱！”同行们讥笑他是“愚笨的巴贝奇”。皇家学院的权威人士，包括著名的天文学家艾瑞等人，都公开宣称他的差分机“毫无任何价值”……<br>就在这痛苦艰难的时刻，一缕春风悄然吹开巴贝奇苦闷的心扉。他意外地收到一封来信，写信人不仅对他表示理解而且还希望与他共同工作。娟秀字体的签名，表明了她不凡的身份──伯爵夫人。<br>接到信函后不久，巴贝奇实验室门口走进来一位年轻的女士。只见她身披素雅的斗蓬，鬓角上斜插一束白色的康乃馨，显得那么典雅端庄，面带着衿持的微笑，向巴贝奇弯腰行了个致敬礼。巴贝奇一时愣在那里，他与这位女士似曾相识，又想不起曾在何处邂逅。女士落落大方地作了自我介绍，来访者正是那位伯爵夫人。<br>“您还记得我吗？”女士低声问道，“十多年前，您还给我讲过差分机原理。”看到巴贝奇迷惑的眼神，她又笑着补充说：“您说我像野人见到了望远镜。”巴贝奇恍然大悟，想起已经十分遥远的往事。面前这位俏丽的女士和那个小女孩之间，依稀还有几分相似。<br>原来，夫人本名叫阿达·奥古斯塔，是英国大名鼎鼎的诗人拜伦之独生女。她比巴贝奇的年龄要小20多岁，1815年才出生。阿达自小命运多舛，来到人世的第二年，父亲拜伦因性格不合与她的母亲离异，从此别离英国。可能是从未得到过父爱的缘由，小阿达没有继承到父亲诗一般的浪漫热情，却继承了母亲的数学才能和毅力。那还是阿达的少女时代，母亲的一位朋友领着她们去参观巴贝奇的差分机。其他女孩子围着差分机叽叽喳喳乱发议论，摸不清头脑。只有阿达看得非常仔细，她十分理解并且深知巴贝奇这项发明的重大意义。<br>或许是这个小女孩特殊的气质，在巴贝奇的记忆里打下了较深的印记。他赶紧请阿达入座，并欣然同意与这位小有名气的数学才女共同研制新的计算机器。<br>就这样，在阿达27岁时，她成为巴贝奇科学研究上的合作伙伴，迷上这项常人不可理喻的“怪诞”研究。其时，她已经成了家，丈夫是洛甫雷斯伯爵。按照英国的习俗，许多资料在介绍里都把她称为“洛甫雷斯伯爵夫人”。<br>30年的困难和挫折并没有使巴贝奇折服，阿达的友情援助更坚定了他的决心。还在大型差分机进军受挫的1834年，巴贝奇就已经提出了一项新的更大胆的设计。他最后冲刺的目标，不是仅仅能够制表的差分机，而是一种通用的数学计算机。巴贝奇把这种新的设计叫做“分析机”，它能够自动解算有100个变量的复杂算题，每个数可达25位，速度可达每秒钟运算一次。今天我们再回首看看巴贝奇的设计，分析机的思想仍然闪烁着天才的光芒。<br>巴贝奇首先为分析机构思了一种齿轮式的“存贮库”，每一齿轮可贮存10个数，总共能够储存1000个50位数。分析机的第二个部件是所谓“运算室”，其基本原理与帕斯卡的转轮相似，但他改进了进位装置，使得50位数加50位数的运算可完成于一次转轮之中。此外，巴贝奇也构思了送入和取出数据的机构、以及在“存储库”和“运算室”之间运输数据的部件。他甚至还考虑到如何使这台机器处理依条件转移的动作。一个多世纪过去后，现代电脑的结构几乎就是巴贝奇分析机的翻版，只不过它的主要部件被换成了大规模集成电路而已。仅此一说，巴贝奇就当之无愧于计算机系统设计的“开山鼻祖”。<br>俏阿达“心有灵犀一点通”，她非常准确地评价道：“分析机‘编织’的代数模式同杰卡德织布机编织的花叶完全一样”。于是，为分析机编制一批函数计算程序的重担，落到了数学才女柔弱的肩头。阿达开天辟地第一回为计算机编出了程序，其中包括计算三角函数的程序、级数相乘程序、伯努利函数程序等等。阿达编制的这些程序，即使到了今天，电脑软件界的后辈仍然不敢轻易改动一条指令。人们公认她是世界上第一位软件工程师，港台地区的书刊，还把她请上了软件界“开山祖师奶”的赫赫宝座。众所周知，美国国防部据说是花了250亿美元和10年的光阴，把它所需要软件的全部功能混合在一种计算机语言中，希望它能成为军方数千种电脑的标准。1981年，这种语言被正式命名为ADA语言，使阿达的英名流传至今。<br>不过，以上讲的都是后话，殊不知巴贝奇和阿达当年处在怎样痛苦的水深火热之中！由于得不到任何资助，巴贝奇为把分析机的图纸变成现实，耗尽了自己全部财产，搞得一贫如洗。他只好暂时放下手头的活，和阿达商量设法赚一些钱，如制作国际象棋玩具、赛马游戏机等等。为筹措科研经费，他们不得不“下海”搞“创收”。最后，两人陷入了惶惶不可终日的窘境。阿达忍痛两次把丈夫家中祖传的珍宝送进当铺，以维持日常开销，而这些财宝又两次被她母亲出资赎了回来。<br>贫困交加，无休无止脑力劳动，阿达的健康状况急剧恶化。1852年，怀着对分析机成功的美好梦想和无言的悲怆，巾帼软件奇才魂归黄泉，香消魄散，死时年仅36岁。<br>阿达去后，巴贝奇又默默地独自坚持了近20年。晚年的他已经不能准确地发音，甚至不能有条理地表达自己的意思，但是他仍然百折不挠地坚持工作。<br>上帝对巴贝奇和阿达太不公平！分析机终于没能造出来，他们失败了。巴贝奇和阿达的失败是因为他们看得太远，分析机的设想超出了他们所处时代至少一个世纪！然而，他们留给了计算机界后辈们一份极其珍贵的精神遗产，包括30种不同的设计方案，近2100张组装图和50000张零件图……，更包括那种在逆境中自强不息，为追求理想奋不顾身的拼搏！<br>1871年，为计算机事业而贡献了终生的先驱者终于闭上了眼睛。当时就有人把他的大脑用盐渍着保存起来，想经过若干年后，有更先进技术来研究他大脑特别的机制；现在的人们，当然更不会以成败来论英雄！</p><h1 id="托马斯·爱迪生（当之无愧的发明大王，尼古拉·特斯拉的死敌）"><a href="#托马斯·爱迪生（当之无愧的发明大王，尼古拉·特斯拉的死敌）" class="headerlink" title="托马斯·爱迪生（当之无愧的发明大王，尼古拉·特斯拉的死敌）"></a>托马斯·爱迪生（当之无愧的发明大王，尼古拉·特斯拉的死敌）</h1>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACGN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课--硬件部分</title>
      <link href="/2023/07/19/DOTS%E5%85%88%E5%AF%BC/"/>
      <url>/2023/07/19/DOTS%E5%85%88%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>本文素材，封面画师uid:93134161，画风肃杀冷峻，工业味很浓我很喜欢…文章内容主要来自油管的计算机科学速成课前九节，链接：<a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulI">https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulI</a></p></div><h1 id="1-计算机科学早期历史"><a href="#1-计算机科学早期历史" class="headerlink" title="1 计算机科学早期历史"></a>1 计算机科学早期历史</h1><h2 id="1-1-人類最古の計算裝置"><a href="#1-1-人類最古の計算裝置" class="headerlink" title="1.1 人類最古の計算裝置"></a>1.1 人類最古の計算裝置</h2><p>人类史上公认的第一台计算设备是算盘，于公元前2500年发明于美索不达米亚<br>可以进行加减计算并存储当前的计算状态</p><h2 id="1-2-計算設備の大航海時代"><a href="#1-2-計算設備の大航海時代" class="headerlink" title="1.2 計算設備の大航海時代"></a>1.2 計算設備の大航海時代</h2><p>在接下来 4000 年，人类发明了各种巧妙的计算设备，比如星盘，让船只可以在海上计算纬度或计算尺，帮助计算乘法和除法。人们还创造了上百种时钟算日出，潮汐，天体的位置，或纯粹拿来计时。这些设备让原先很费力的事变得更快，更简单，更精确。<br>计算机先驱Charles Babbage（查尔斯·巴贝奇）曾说:<br><div class="note danger simple"><p>随着知识的增长和新工具的诞生，人工劳动力会越来越少</p></div></p><hr><h2 id="1-3-“First-Usage-of-computer”"><a href="#1-3-“First-Usage-of-computer”" class="headerlink" title="1.3 “First Usage of computer”"></a>1.3 “First Usage of computer”</h2><p>但是Computer一词最早出现在1613年的一本书里，作者名为Richard Braithwait,他说：<br><div class="note danger simple"><p>随着知识的增长和新工具的诞生，人工劳动力会越来越少</p></div><br>那时, “Computer” 指负责计算的人，”Computer” 偶尔会用机器帮忙，但大部分时候靠自己。这个职位一直到 1800 年代还存在，之后 “Computer” 逐渐开始代表机器。</p><hr><h2 id="1-4-步进计算机"><a href="#1-4-步进计算机" class="headerlink" title="1.4 步进计算机"></a>1.4 步进计算机</h2><p>其中”步进计算器”最有名，由德国博学家 戈特弗里德·莱布尼茨 建造于 1694 年。<br>莱布尼茨曾说：<br><div class="note danger simple"><p>“让优秀的人浪费时间算数简直侮辱尊严,农民用机器能算得一样准”</p></div></p><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><p>“步进计算器”有点像汽车里的里程表，不断累加里程数，它有一连串可以转动的齿，每个齿轮有十个齿，代表数字0到9，每当一个齿轮转过 9，它会转回 0，同时让旁边的齿轮前进 1 个齿，就像算盘超过 10 一样。做减法时，机器会反向运作。</p><h3 id="乘除法"><a href="#乘除法" class="headerlink" title="乘除法"></a>乘除法</h3><p>利用一些巧妙的机械结构，步进计算器也能做乘法和除法。乘法和除法 实际上只是多个加法和减法，举例，17除以5，我们只要减5，减5，再减5，直到不能再减 5，就知道了 17=5x3+2，步进计算器 可以自动完成这种操作。<br>它是第一台能做”加减乘除”全部四种运算的机器，它的设计非常成功，以至于沿用了 3 个世纪。</p><hr><h2 id="1-5-计算表"><a href="#1-5-计算表" class="headerlink" title="1.5 计算表"></a>1.5 计算表</h2><p>不幸的是，即使有机械计算器，许多现实问题 依然需要很多步，算一个结果可能要几小时甚至几天而且这些手工制作的机器非常昂贵，大部分人买不起。所以在 20 世纪以前，大部分人会用预先算好的计算表。<br>这些计算表由之前说的 “人力计算器” 编撰，如果你想知道 867,5309 的平方根，与其花一整天来手摇 “步进计算器”，你可以花一分钟在表里找答案。<br>速度和准确性在战场上尤为重要，因此军队很早就开始用计算解决复杂问题，如何精确瞄准炮弹是一个很难的问题。19世纪，这些炮弹的射程可以达到 1 公里以上（比半英里多一点），因为风力，温度，大气压力会不断变化，想打中船一样大的物体也非常困难，于是出现了射程表，炮手可以查环境条件和射击距离，然后这张表会告诉他们，角度要设成多少。这些射程表很管用，二战中被广泛应用。<br><img src="https://p0.itc.cn/images01/20211225/099ee4ad0b564033b1890150770f005e.jpeg" alt="code"></p><hr><h2 id="1-6-差分机"><a href="#1-6-差分机" class="headerlink" title="1.6 差分机"></a>1.6 差分机</h2><p>18世纪末，法兰西发起了一项宏大的计算工程──人工编制《数学用表》，这在没有先进计算工具的当时，可是件极其艰巨的工作。法国数学界调集大批精兵强将，组成了人工手算的流水线，算得个天昏地暗，才完成了17卷大部头书稿。即便如此，计算出的数学用表仍然存在大量错误。<br>问题是如果改了大炮或炮弹的设计，就要算一张新表，这样很耗时而且会出错。Charles Babbage 在 1822 年写了一篇论文，向皇家天文学会指出了这个问题，<br>标题叫： “机械在天文与计算表中的应用”。Charles Babbage 提出了一种新型机械装置叫 “差分机”。<br>一个更复杂的机器，能近似多项式，多项式描述了几个变量之间的关系，比如射程和大气压力，或者 Carrie Anne 要吃多少披萨才开心。多项式也可以用于近似对数和三角函数，这些函数手算相当麻烦。Charles Babbage 在 1823 年开始建造差分机，并在接下来二十年，试图制造和组装 25,000 个零件，总重接近 15 吨。不幸的是，该项目最终放弃了。<br>但在 1991 年，历史学家根据 Charles Babbage 的草稿做了一个差分机而且它还管用！但更重要的是，在差分机的建造期间，Charles Babbage 构想了一个更复杂的机器 - 分析机，不像差分机，步进计算器 和以前的其他计算设备，分析机是 “通用计算机”。它可以做很多事情，不只是一种特定运算；甚至可以给它数据，然后按顺序执行一系列操作；它有内存 甚至一个很原始的打印机，就像差分机，这台机器太超前了，所以没有建成。<br><img src="https://bkimg.cdn.bcebos.com/pic/cb8065380cd79123f000a204ad345982b3b780d9?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UxNTA=,g_7,xp_5,yp_5/format,f_auto" alt="code"></p><hr><h1 id="2-电子计算机"><a href="#2-电子计算机" class="headerlink" title="2 电子计算机"></a>2 电子计算机</h1><h2 id="2-1-继电器-relay"><a href="#2-1-继电器-relay" class="headerlink" title="2.1 继电器(relay)"></a>2.1 继电器(relay)</h2><p>世界上最大的机电计算机之一是哈佛的马克一号，是IBM在1944年给二战同盟国建造的。该机器的大脑是由继电器（relay）构成的，存在大约3500个继电器。建造用途是给曼哈顿计划跑模拟。</p><p>继电器：用电控制的机械开关<br>控制线路用于控制电路的开关，它连接着一个线圈，当线圈通电时，会产生感应磁场，由此能够吸引上方的金属臂，从而闭合电路，得到高电平。<br>性能：1940年一个好的继电器1秒能翻转50次。哈佛马克一号1秒能做3次加减法运算，一次乘法需要6秒，除法需要15秒，三角函数需要一分钟以上。<br>缺点：控制开关的金属臂是“有质量的”(has mass)，因此无法快速开关。并且金属臂的反复移动就会存在磨损（任何会动的机械都会随时间磨损），哈佛马克一号平均每天需要更换一个故障继电器。<br>除了器件磨损问题，这些巨大、黑色、温暖的机器还会吸引昆虫。1947年9月哈佛马克二的操作员从故障继电器中拔出了一只死虫。<br>Grace Hopper曾说：”Form then on,when anything went wrong with a computer,We said it had bugs in it”<br>这就是计算机术语Computer BUG一词的来源。</p><h2 id="2-2-真空管"><a href="#2-2-真空管" class="headerlink" title="2.2 真空管"></a>2.2 真空管</h2><p>1904年，英国物理学家John Ambrose Fleming开发了新的电子组件——热电子管（Thermionic valve）。</p><p>热电子管：把两个电极装在一个气密的真空玻璃灯泡中。其中一个电极A可以加热，从而发射电子，称为热电子发射（Thermionic emission）；另一个电极B会吸引电子，来形成电流。但只有当电极B带正电时才能吸引电子，否则当电极B带负电荷或者中性电荷时，电子就无法跨越真空区域，就没有电流。<br>电流只能单向流通的电子元件叫二极管(DIODE)，但是我们需要的是能开关电流的东西。<br>幸运的是，不久之后的1906年，美国发明家Lee de Forest在此基础上加入了第三个控制电极。通过向控制电极施加正电荷，就能吸引电子，从而闭合电路；而通过施加负电荷，就能闭合电路。</p><p>性能：每秒可开闭数千次。</p><p>优势：和继电器相同的是，可以通过一个控制线路来控制断开或闭合电路，并且真空管内没有会动的组件，因此存在更少的磨损。</p><p>缺点：比较脆弱，并且会像灯泡一样烧坏，并且体积比较大。</p><p>真空管的出现，标志着计算机从机电转向电子</p><p>第一个大规模使用真空管的计算机是巨人1号，由工程师Tommy Flowers设计并于1943年12月完工。巨人1号包含1600个真空管，并被认为是第一个可编程的电子计算机，编程方法是把几百根电线插入插板，由此让计算机执行正确操作。</p><p>电子数值积分计算机ENIAC，在1946年于宾夕法尼亚大学设计制造，设计者是Jonh Mauchly和J.Presper Ecket，这是世上第一个真正的通用可编程电子计算机，每秒可执行5000次十位加减法。但是由于存在大量的真空管，因此ENIAC运行半天左右就会出现一次故障。</p><h2 id="2-3-晶体管"><a href="#2-3-晶体管" class="headerlink" title="2.3 晶体管"></a>2.3 晶体管</h2><p>1947年贝尔实验室发明了晶体管（Transistor），原理牵扯到量子力学，这里只将基础部分。</p><p>晶体管：类似于继电器和真空管，晶体管也是一个用于控制电路闭合断开的开关。晶体管有两个电极，这两个电极之间通过半导体材料隔开。这里通过控制连接到半导体的电极电荷数，可以控制半导体的导电性，由此来控制电流是否流动。当控制线路通电时，两个电极接通，否则两个电极断开。</p><p>性能：每秒可开关10000次。</p><p>优势：相比玻璃制成的真空管，晶体管是固体的，并且体积远小于继电器和真空管。</p><p>第一个消费者可购买的，完全由晶体管构成的计算机是1957年发布的IBM 608，它有3000个晶体管，每秒执行4500次加减法，或80次左右的乘除法。</p><p>如今，计算机里的晶体管小于50nm，并且每秒可切换上百万次，工作几十年。很多晶体管和半导体开发在圣克拉拉谷，位于旧金山和圣河西之间，由于制造半导体最常见的材料是硅(Silicon)，由此这个地方被称为“硅谷”（silicon valley）。并且William Shockley搬过去创建了肖克利半导体(Shockley Semiconductor)，里面的员工后来成立了仙童半导体(Fairchild Semiconductor)，而这里面的员工后来又创立了AMD和英特尔(Intel),而英特尔当今世界上最大的计算机芯片制造商。</p><h1 id="3-布尔逻辑-Boolean-Logic-和逻辑门-Logic-Gates"><a href="#3-布尔逻辑-Boolean-Logic-和逻辑门-Logic-Gates" class="headerlink" title="3 布尔逻辑(Boolean Logic)和逻辑门(Logic Gates)"></a>3 布尔逻辑(Boolean Logic)和逻辑门(Logic Gates)</h1><h2 id="3-1-什么是二进制，为什么用二进制，什么是布尔逻辑"><a href="#3-1-什么是二进制，为什么用二进制，什么是布尔逻辑" class="headerlink" title="3.1 什么是二进制，为什么用二进制，什么是布尔逻辑?"></a>3.1 什么是二进制，为什么用二进制，什么是布尔逻辑?</h2><h2 id="3-2-三个基本操作-非-Not-与-And-或-Or"><a href="#3-2-三个基本操作-非-Not-与-And-或-Or" class="headerlink" title="3.2 三个基本操作:非(Not) 与(And) 或(Or)"></a>3.2 三个基本操作:非(Not) 与(And) 或(Or)</h2><h2 id="3-3-三个基本操作的原理"><a href="#3-3-三个基本操作的原理" class="headerlink" title="3.3 三个基本操作的原理"></a>3.3 三个基本操作的原理</h2><h2 id="3-4-XOR-异或"><a href="#3-4-XOR-异或" class="headerlink" title="3.4 XOR 异或"></a>3.4 XOR 异或</h2><h1 id="4-二进制-Representing-Numbers-and-Letters-with-Binary"><a href="#4-二进制-Representing-Numbers-and-Letters-with-Binary" class="headerlink" title="4 二进制-Representing Numbers and Letters with Binary"></a>4 二进制-Representing Numbers and Letters with Binary</h1><h1 id="5-算数逻辑单元-ALU"><a href="#5-算数逻辑单元-ALU" class="headerlink" title="5 算数逻辑单元-ALU"></a>5 算数逻辑单元-ALU</h1><h1 id="6-寄存器-amp-内存-Registers-and-RAM"><a href="#6-寄存器-amp-内存-Registers-and-RAM" class="headerlink" title="6 寄存器&amp;内存-Registers and RAM"></a>6 寄存器&amp;内存-Registers and RAM</h1><h1 id="7-中央处理器-CPU"><a href="#7-中央处理器-CPU" class="headerlink" title="7 中央处理器-CPU"></a>7 中央处理器-CPU</h1><h1 id="8-指令和程序"><a href="#8-指令和程序" class="headerlink" title="8 指令和程序-"></a>8 指令和程序-</h1><h1 id="9-高级CPU设计-Advance-CPU-design"><a href="#9-高级CPU设计-Advance-CPU-design" class="headerlink" title="9 高级CPU设计-Advance CPU design"></a>9 高级CPU设计-Advance CPU design</h1>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2022与VScode使用手记</title>
      <link href="/2023/06/21/VS2022%E4%B8%8EVScode%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"/>
      <url>/2023/06/21/VS2022%E4%B8%8EVScode%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>知己知彼，百战不殆 —孙子《孙子兵法·谋攻篇》<br>在开始大批量地编程前，我们最好对自己使用的编程工具有一个比较清晰的认识<br>我将简单通过本文总结一下自己在游戏开发是遇到的IDE快捷键问题，帮助读者快速了解VScode和VS2022两款常用IDE</p><h1 id="VScode部分"><a href="#VScode部分" class="headerlink" title="VScode部分"></a>VScode部分</h1><p>你说得对，但是首先vscode是一个运行于MacOS X、Windows和Linux之上的，针对于编写现代Web和云应用的跨平台源代码编辑器；vscode免费而且功能强大，对JavaScript和NodeJS的支持非常好，自带很多功能，例如代码格式化，代码智能提示补全、Emmet插件等。<br>鉴于本人仅仅使用vscode来维护个人博客和进行一些算法练习，因此不过多介绍vscode的使用方法<br>视频连接:<a href="https://www.youtube.com/watch?v=ifTF3ags0XI">https://www.youtube.com/watch?v=ifTF3ags0XI</a></p><h2 id="CTRL-C"><a href="#CTRL-C" class="headerlink" title="CTRL + C"></a>CTRL + C</h2><p>复制</p><h2 id="CTRL-V"><a href="#CTRL-V" class="headerlink" title="CTRL + V"></a>CTRL + V</h2><p>粘贴</p><h2 id="CTRL-X"><a href="#CTRL-X" class="headerlink" title="CTRL + X"></a>CTRL + X</h2><p>剪切</p><h2 id="CTRL-P"><a href="#CTRL-P" class="headerlink" title="CTRL + P"></a>CTRL + P</h2><p>可以调出command palette（命令面板P）<br>1.可以通过输入搜索想要的文件名<br>2.可以通过输入<strong> &gt; </strong>可以调出能用的大部分指令<br>3.可以通过#后输入驼峰命名法的任意大写字母以得到想要的类与接口</p><h2 id="CTRL-G"><a href="#CTRL-G" class="headerlink" title="CTRL + G"></a>CTRL + G</h2><p>然后输入行号锁定到对应行号</p><h2 id="Shift-←-→"><a href="#Shift-←-→" class="headerlink" title="Shift + ←/→"></a>Shift + ←/→</h2><p>作用可以等同于用鼠标拖动部分文字</p><h2 id="CTRL-←-→"><a href="#CTRL-←-→" class="headerlink" title="CTRL + ←/→"></a>CTRL + ←/→</h2><p>实现单词之间移动</p><h2 id="CTRL-D"><a href="#CTRL-D" class="headerlink" title="CTRL + D"></a>CTRL + D</h2><p>可以实现多行编辑</p><h2 id="ALT-鼠标单击"><a href="#ALT-鼠标单击" class="headerlink" title="ALT + 鼠标单击"></a>ALT + 鼠标单击</h2><p>可以实现多行编辑</p><h2 id="ALT-↑-↓"><a href="#ALT-↑-↓" class="headerlink" title="ALT + ↑/↓"></a>ALT + ↑/↓</h2><p>可以将光标停留的行上下移动</p><h2 id="ALT-SHIFT-↑-↓"><a href="#ALT-SHIFT-↑-↓" class="headerlink" title="ALT + SHIFT + ↑/↓"></a>ALT + SHIFT + ↑/↓</h2><p>一边移动一边复制</p><h2 id="CTRL-L"><a href="#CTRL-L" class="headerlink" title="CTRL + L"></a>CTRL + L</h2><p>逐行高亮代码</p><h2 id="CTRL"><a href="#CTRL" class="headerlink" title="CTRL + /"></a>CTRL + /</h2><p>注释选中代码</p><h2 id="CTRL-K"><a href="#CTRL-K" class="headerlink" title="CTRL + K"></a>CTRL + K</h2><p>清除终端的内容或报错</p><h2 id="CTRL-‘-打开控制台"><a href="#CTRL-‘-打开控制台" class="headerlink" title="CTRL + ‘ 打开控制台"></a>CTRL + ‘ 打开控制台</h2><p>使用命令行进行操作</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h1 id="VS-2022部分"><a href="#VS-2022部分" class="headerlink" title="VS 2022部分"></a>VS 2022部分</h1><p><code>error list的报错会缺失很多信息，不建议使用error list来Debug</code><br><code>如果要详细了解bug所在，请查看输出(output)</code></p><h2 id="Ctrl-F7"><a href="#Ctrl-F7" class="headerlink" title="Ctrl + F7"></a>Ctrl + F7</h2><p>单独编译.cpp代码(单独编译代码的时候链接不会发生)</p><h2 id="用于C-项目的Visual-Studio最佳设置"><a href="#用于C-项目的Visual-Studio最佳设置" class="headerlink" title="用于C++项目的Visual Studio最佳设置"></a>用于C++项目的Visual Studio最佳设置</h2><ol><li>默认的C++空项目中，资源管理器显示的文件夹是虚拟文件夹，并不是文件在项目文件夹内的布局，因此需要在资源管理器上点击<code>显示所有文件</code></li><li>在资源管理器的项目名称上右键属性，选择所有配置和所有平台，将输出目录改为<code>$(SolutionDir)bin\$(Platform)\$(Configuration)\</code>，这段地址意为将编译生成的二进制.exe文件(binary)放在解决方案根目录的bin文件夹内，然后按照平台和解决方案放好。</li><li>同样的，把中间目录改为<code>$(SolutionDir)bin\intermediates\$(Platform)\$(Configuration)\</code><h2 id="如何用Visual-Studio-Debug代码"><a href="#如何用Visual-Studio-Debug代码" class="headerlink" title="如何用Visual Studio Debug代码"></a>如何用Visual Studio Debug代码</h2><code>记住一点如果程序有Bug了，那么电脑多数时候是对的，是你写的代码出问题了</code><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><code>黄色箭头的意思是IDE刚刚把程序执行到那行代码之前，尚未执行</code><h3 id="F11-Step-into"><a href="#F11-Step-into" class="headerlink" title="F11 Step into"></a>F11 Step into</h3>跳进当前行的函数<h3 id="F10-step-over"><a href="#F10-step-over" class="headerlink" title="F10 step over"></a>F10 step over</h3>跳到下一行<h3 id="Shift-F13-step-out"><a href="#Shift-F13-step-out" class="headerlink" title="Shift + F13 step out"></a>Shift + F13 step out</h3>跳出当前函数回到调用该函数的位置<h2 id="读内存"><a href="#读内存" class="headerlink" title="读内存"></a>读内存</h2></li><li>watch(监视窗口)</li><li>Debug(调试)-&gt;Window(窗口)-&gt;Memoary(内存)-&gt;内存1/2/3/4</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本站运营备忘录</title>
      <link href="/2022/12/01/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/"/>
      <url>/2022/12/01/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="零、重装系统后或是在别的设备上部署本博客的方法"><a href="#零、重装系统后或是在别的设备上部署本博客的方法" class="headerlink" title="零、重装系统后或是在别的设备上部署本博客的方法"></a>零、重装系统后或是在别的设备上部署本博客的方法</h1><ol><li>部署本博客所需的条件为<br>操作系统：Windows10<br>Node.js<br>Git<br>Hexo<br>Visual Studio Code<br>GitHub 帐号<br>一个域名（自费购买）</li><li>重新安装node.js，建议使用LTS(长期支持)版本，点击这个链接下载<br><a href="https://nodejs.org/en">https://nodejs.org/en</a><br>在Windows命令行使用以下指令查看node版本<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li><li>修改npm源为国内源<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>安装hexo<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>和node一样查看版本<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li><li><p>重新安装Git，点击这个链接下载<br><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</a></p></li><li><p>配置git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户名随意，邮箱使用注册github的邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"><span class="comment">#配置后检查是否成功</span></span><br><span class="line">git config -l</span><br></pre></td></tr></table></figure></li><li>用以下命令生成ssh钥，在C盘.ssh文件夹中找到 id_rsa.pub文件，用记事本复制后，在github个人页面点击头像，点击Settings,点击SSH and GPG keys，点击绿色的New SSH key,把公钥复制进去，随便起个好记的名，点Add SSH key，最后在Git测试连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>跳出相应文字即为成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 你的用户名! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></li><li>拉取Github仓库里的博客文件，可以搞到最新的文章<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CNamxl/CNamxl.github.io.git</span><br></pre></td></tr></table></figure></li><li>想办法搞到本博客的源文件，并在有.github文件夹的位置(博客根目录)鼠标右键，Git Bash打开1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line">npm i</span><br><span class="line"><span class="comment"># 外挂标签插件</span></span><br><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br><span class="line"><span class="comment"># 跟换与外挂标签兼容性更强的渲染器</span></span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br><span class="line"><span class="comment"># 安装追番页面</span></span><br><span class="line">npm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure></li><li>重新配置的git更新博客可能会出现报错，按照说明给命令输入就可以解决了</li></ol><h1 id="一、图床和图片"><a href="#一、图床和图片" class="headerlink" title="一、图床和图片"></a>一、图床和图片</h1><p>本站目前使用的图床是基于github仓库的图床,具体实现方法请参考这个链接:<a href="https://www.fomal.cc/posts/d7fb1ba1.html">https://www.fomal.cc/posts/d7fb1ba1.html</a><br>根据网站博主的教程，在github创建图床仓库后，可以通过如下指令将已有的图床下载到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:用户名/图床名.git</span><br></pre></td></tr></table></figure><br>更新图床的具体步骤就是将要更新的图片放入相应文件夹中，然后在bash中输入如下命令就可以更新图床<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><h2 id="在线图片和本地图片"><a href="#在线图片和本地图片" class="headerlink" title="在线图片和本地图片"></a>在线图片和本地图片</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://p0.itc.cn/images01/20211225/099ee4ad0b564033b1890150770f005e.jpeg</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># 图床图片</span></span><br><span class="line">https://img.cnamxl.icu/img/0824ab18972bd40735fab62003db89510fb30e24a396.webp</span><br></pre></td></tr></table></figure><h1 id="二、文章常用md语法"><a href="#二、文章常用md语法" class="headerlink" title="二、文章常用md语法"></a>二、文章常用md语法</h1><p>请参考此链接:<a href="https://blog.csdn.net/u014061630/article/details/81359144">https://blog.csdn.net/u014061630/article/details/81359144</a></p><h2 id="1-hexo自带语法"><a href="#1-hexo自带语法" class="headerlink" title="1.hexo自带语法"></a>1.hexo自带语法</h2><h3 id="1-1-文本格式"><a href="#1-1-文本格式" class="headerlink" title="1.1 文本格式"></a>1.1 文本格式</h3><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">代码格式</button></li><li class="tab"><button type="button" data-href="#test4-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-2表格"><a href="#1-2表格" class="headerlink" title="1.2表格"></a>1.2表格</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h2><h3 id="2-1表单用法"><a href="#2-1表单用法" class="headerlink" title="2.1表单用法"></a>2.1表单用法</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-2行内文本"><a href="#2-2行内文本" class="headerlink" title="2.2行内文本"></a>2.2行内文本</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-3行内文本span"><a href="#2-3行内文本span" class="headerlink" title="2.3行内文本span"></a>2.3行内文本span</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-4-折叠标签"><a href="#2-4-折叠标签" class="headerlink" title="2.4 折叠标签"></a>2.4 折叠标签</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-修改条目专用格式"><a href="#3-修改条目专用格式" class="headerlink" title="3.修改条目专用格式"></a>3.修改条目专用格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs  %&#125;</span><br><span class="line">&lt;!-- tab 代码格式 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 渲染效果 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h1 id="三、更新友链的方法"><a href="#三、更新友链的方法" class="headerlink" title="三、更新友链的方法"></a>三、更新友链的方法</h1><ol><li>获取网站图标,在大部分网站url后边加上即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/favicon.ico</span><br></pre></td></tr></table></figure></li><li>获取网站缩略图的方法<br>截图可以做到（目前使用）<br>PHP可以做到<br>原有的捷径木有喽Kira~☆<h1 id="四、文章创建-重要"><a href="#四、文章创建-重要" class="headerlink" title="四、文章创建(重要)"></a>四、文章创建(重要)</h1>直接在Vs Code的文件夹里创建文章可能会导致文章丢失，因此建议在linux命令行或者是git bash使用以下命令创建：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure>基本的文章属性</li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: [标题]</span><br><span class="line">date: [创建日期]</span><br><span class="line">tags: [标签]</span><br><span class="line">categories: [分类]</span><br><span class="line"><span class="section">cover: [封面URL]</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h1 id="五、更新番组数据的方法"><a href="#五、更新番组数据的方法" class="headerlink" title="五、更新番组数据的方法"></a>五、更新番组数据的方法</h1><p>使用git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">hexo bangumis -u</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">$ hexo bangumis -d</span><br></pre></td></tr></table></figure></p><h1 id="五、个人邮箱邮箱"><a href="#五、个人邮箱邮箱" class="headerlink" title="五、个人邮箱邮箱"></a>五、个人邮箱邮箱</h1><p>网易：lmh983898216@163.com<br>腾讯QQ：983898216@qq.com<br>谷歌邮箱：lmh983898216@gmail.com（不常用）<br>备用邮箱：cnamxl@proton.me（不常用）</p>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程光速入门--风</title>
      <link href="/2022/08/26/C++%E9%A3%8E/"/>
      <url>/2022/08/26/C++%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>本文是油管The Cherno C++的教程笔记，封面画师uid:93134161，画风肃杀冷峻，工业味很浓我很喜欢…</p></div><h1 id="1-第一段C-代码"><a href="#1-第一段C-代码" class="headerlink" title="1. 第一段C++代码"></a>1. 第一段C++代码</h1><p>在VS中新建空项目，并在空项目源文件夹中新建.cpp文件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;HelloWorld&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-C-如何工作"><a href="#2-C-如何工作" class="headerlink" title="2. C++如何工作"></a>2. C++如何工作</h1><p>C++如何从源文件(.cpp)转换为可执行二进制文件(.exe)?<br>以第一段代码为例</p><h2 id="2-1-预处理指令"><a href="#2-1-预处理指令" class="headerlink" title="2.1 预处理指令"></a>2.1 预处理指令</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span><span class="comment">//preprocessor语句</span></span></span><br></pre></td></tr></table></figure><p>任何以#(hash)开头的语句都是预处理指令，编译器(compiler)收到源文件的时候，它做的第一件事就是预处理所有预处理指令(preprocessor statement)，这就是这段语句为什么要叫预处理指令，在编译前编译器就已经把iostream文件复制粘贴到源文件里了，iostream是一个头文件，我们引用它是为了申明函数(function)cin和cout。</p><h2 id="2-2-主函数"><a href="#2-2-主函数" class="headerlink" title="2.2 主函数"></a>2.2 主函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当运行代码时，主函数就是程序的入口，程序会从主函数的代码开始一行一行依次执行。当然也可以Control flow statements(控制流语句)或者是调用其他函数<br>主函数还有一个特性，它是一个返回值为整型的函数，不需要返回任何整型返回值，如果不返回默认是0。</p><h2 id="2-3-操作符和函数"><a href="#2-3-操作符和函数" class="headerlink" title="2.3 操作符和函数"></a>2.3 操作符和函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout&lt;&lt;<span class="string">&quot;HelloWorld!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure><p>把<code>std::cout&lt;&lt;</code>、<code>&lt;&lt;std::endl</code>和<code>std::cin.get()</code>都可以被视为函数。<br><code>&lt;&lt;</code>是一个操作符。</p><h2 id="2-4-C-编译原理"><a href="#2-4-C-编译原理" class="headerlink" title="2.4 C++编译原理"></a>2.4 C++编译原理</h2><ol><li>复制粘贴所有预编译指令中的头文件到源文件</li><li><code>编译器</code>把一个个<code>.cpp文件</code>编译成一个个<code>object文件</code>，Windows编译器编译的扩展名是<code>.obj</code>。</li><li>然后<code>链接器(linker)</code>就把所有<code>.obj</code>文件链接起来成为<code>.exe</code>文件</li><li>编译的时候要保证所有函数都在main.cpp中申明(declare)了<br><code>注意：只有.cpp文件会被编译而头文件(.h)不会</code><br><code>函数签名(signature)错误会导致Link error</code><h2 id="2-5解决方案配置-Configuration-和解决方案平台-Platform"><a href="#2-5解决方案配置-Configuration-和解决方案平台-Platform" class="headerlink" title="2.5解决方案配置(Configuration)和解决方案平台(Platform)"></a>2.5解决方案配置(Configuration)和解决方案平台(Platform)</h2>一般来说可以再VS的工具栏里找到，解决方案配置默认有Debug和Release，解决方案平台默认有x64和x86<br>如果要更改解决方案配置就可以在<code>解决方案配置和解决方案平台下拉菜单</code>中点击配置管理器或者在<code>资源管理器</code>右键项目，选择属性(Properties),在更改配置管理的同时查看项目的属性，比如SDK版本。同时编译器和链接器的设置也在这里<h2 id="2-6申明-declare-和定义-define"><a href="#2-6申明-declare-和定义-define" class="headerlink" title="2.6申明(declare)和定义(define)"></a>2.6申明(declare)和定义(define)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span><span class="comment">//Log函数的定义</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Log</span>(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//log.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*Log函数的申明*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt; log &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-数据类型-Data"><a href="#3-数据类型-Data" class="headerlink" title="3. 数据类型(Data)"></a>3. 数据类型(Data)</h1>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：<br>|   类型   |  关键字   |<br>| ———- | ———- |<br>| 布尔型   |    bool  |<br>|   字符型   |   char   |<br>|   整型  |     int  |<br>|   浮点型  | float |<br>|  双浮点型  |   double |<br>|  无类型  |  void  |<br>|  宽字符型 | wchar_t |<br>其实 wchar_t 是这样来的：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> <span class="type">int</span> <span class="type">wchar_t</span>; <span class="comment">//typedef相当于给现有的数据类型套个名字</span></span><br></pre></td></tr></table></figure>数据类型的大小请点击这个链接：<a href="https://www.runoob.com/cplusplus/cpp-data-types.html">https://www.runoob.com/cplusplus/cpp-data-types.html</a><h1 id="4-变量类型-Variables"><a href="#4-变量类型-Variables" class="headerlink" title="4. 变量类型(Variables)."></a>4. 变量类型(Variables).</h1>变量(Variables)就是用来存储数据(Data)的。<br>变量占据了内存(Memories)<h2 id="4-1整数类型-sInteger-Types"><a href="#4-1整数类型-sInteger-Types" class="headerlink" title="4.1整数类型(sInteger Types):"></a>4.1整数类型(sInteger Types):</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">-1</span>；</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ua = <span class="number">1</span>；</span><br></pre></td></tr></table></figure>int：用于表示整数，通常占用4个字节。<br>short：用于表示短整数，通常占用2个字节。<br>long：用于表示长整数，通常占用4个字节。<br>long long：用于表示更长的整数，通常占用8个字节。<h2 id="4-2浮点类型（Floating-Point-Types）："><a href="#4-2浮点类型（Floating-Point-Types）：" class="headerlink" title="4.2浮点类型（Floating-Point Types）："></a>4.2浮点类型（Floating-Point Types）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> speed = <span class="number">1.5f</span>；</span><br><span class="line"><span class="type">double</span> mess = <span class="number">0.02</span>；</span><br></pre></td></tr></table></figure>float：用于表示单精度浮点数，通常占用4个字节。<br>double：用于表示双精度浮点数，通常占用8个字节。<br>long double：用于表示更高精度的浮点数，占用字节数可以根据实现而变化。<h2 id="4-3字符类型（Character-Types）："><a href="#4-3字符类型（Character-Types）：" class="headerlink" title="4.3字符类型（Character Types）："></a>4.3字符类型（Character Types）：</h2>char：用于表示字符，通常占用1个字节。<br>wchar_t：用于表示宽字符，通常占用2或4个字节。<br>char16_t：用于表示16位Unicode字符，占用2个字节。<br>char32_t：用于表示32位Unicode字符，占用4个字节。<h2 id="4-4布尔类型（Boolean-Type）："><a href="#4-4布尔类型（Boolean-Type）：" class="headerlink" title="4.4布尔类型（Boolean Type）："></a>4.4布尔类型（Boolean Type）：</h2>bool：用于表示布尔值，只能取true或false。<h2 id="4-5枚举类型（Enumeration-Types）："><a href="#4-5枚举类型（Enumeration-Types）：" class="headerlink" title="4.5枚举类型（Enumeration Types）："></a>4.5枚举类型（Enumeration Types）：</h2>enum：用于定义一组命名的整数常量。<h2 id="4-6指针类型（Pointer-Types）："><a href="#4-6指针类型（Pointer-Types）：" class="headerlink" title="4.6指针类型（Pointer Types）："></a>4.6指针类型（Pointer Types）：</h2>type*：用于表示指向类型为type的对象的指针。<h2 id="4-7数组类型（Array-Types）："><a href="#4-7数组类型（Array-Types）：" class="headerlink" title="4.7数组类型（Array Types）："></a>4.7数组类型（Array Types）：</h2>type[]或type[size]：用于表示具有相同类型的元素组成的数组。<h2 id="4-8结构体类型（Structure-Types）："><a href="#4-8结构体类型（Structure-Types）：" class="headerlink" title="4.8结构体类型（Structure Types）："></a>4.8结构体类型（Structure Types）：</h2>struct：用于定义包含多个不同类型成员的结构。<h2 id="4-9类类型（Class-Types）："><a href="#4-9类类型（Class-Types）：" class="headerlink" title="4.9类类型（Class Types）："></a>4.9类类型（Class Types）：</h2>class：用于定义具有属性和方法的自定义类型。<h2 id="4-10共用体类型（Union-Types）："><a href="#4-10共用体类型（Union-Types）：" class="headerlink" title="4.10共用体类型（Union Types）："></a>4.10共用体类型（Union Types）：</h2>union：用于定义一种特殊的数据类型，它可以在相同的内存位置存储不同的数据类型。</li></ol><h1 id="5-函数-Function"><a href="#5-函数-Function" class="headerlink" title="5.函数(Function)"></a>5.函数(Function)</h1><p>这里的函数指的不是类里的方法，就是类外面定义的函数，在遇到重复多次的同种操作的时候，可以使用函数来简化代码，提高可读性。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下是 max() 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> result;</span><br><span class="line">   <span class="comment">//经典比大小</span></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line">    <span class="comment">//返回变量</span></span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不同.cpp文件的函数要被调用前需要申明，详情见之前的2.6 申明和定义<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span></span>;</span><br><span class="line"><span class="comment">//针对上面定义的函数 max()，以下是函数声明：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span>;</span><br><span class="line"><span class="comment">//在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><h1 id="6-头文件-headfiles"><a href="#6-头文件-headfiles" class="headerlink" title="6.头文件(headfiles)"></a>6.头文件(headfiles)</h1><p>头文件的作用相对比较好理解，它可以被视为一个用来存放函数申明的文件，也就是说将函数的申明集中地放在头文件中，然后再主函数中直接引用头函数文件即可，能极大减少代码量。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用头文件name.h的方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;name.h&quot;</span></span></span><br><span class="line"><span class="comment">//新建头文件时头文件自带的</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//写标准库的人决定让标准库没有扩展名</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><br>pragma once 被称作头文件保护符，表示这个文件在编译之前会被预处理器(pre processor)评估，以为只include一次，可以防止头文件被多次include到同一个翻译单元(cpp文件)里</p><h1 id="7-条件语句和分支语句-Condition-and-Branches"><a href="#7-条件语句和分支语句-Condition-and-Branches" class="headerlink" title="7.条件语句和分支语句(Condition and Branches)"></a>7.条件语句和分支语句(Condition and Branches)</h1><h2 id="7-1-if语句-if-statements"><a href="#7-1-if语句-if-statements" class="headerlink" title="7.1 if语句(if statements)"></a>7.1 if语句(if statements)</h2><p>计算机判断真假时只要不是0便是真<br>通过计算机把C++编译成的汇编可以看出if括号内的判断在成立时，会跳到别的内存位置来执行if语句代码块内的代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> condition = x==<span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>简便写法</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span>(ptr)</span><br><span class="line">   <span class="built_in">Log</span>(ptr);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr == <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">   <span class="built_in">Log</span>(<span class="string">&quot;Log is Hello!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">Log</span>(<span class="string">&quot;Log is null!&quot;</span>);</span><br></pre></td></tr></table></figure><br><code>如何理解else if</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//else if等价于</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>()</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-2-switch语句"><a href="#7-2-switch语句" class="headerlink" title="7.2 switch语句"></a>7.2 switch语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 您可以有任意数量的 case 语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">// 可选的</span></span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以连续两个if如果条件满足，那么两个if语句都会执行，但是if和else if，只要前一个执行了后一个就不执行了。</p><h1 id="8-循环语句-for-loops-while-loops"><a href="#8-循环语句-for-loops-while-loops" class="headerlink" title="8.循环语句(for loops,while loops)"></a>8.循环语句(for loops,while loops)</h1><h2 id="8-1-for循环"><a href="#8-1-for循环" class="headerlink" title="8.1 for循环"></a>8.1 for循环</h2><p>打印五次Hello World,for循环括号内的意思分别为，第一个index起始值大小，第二个循环停止的条件，第三个每次循环后index进行的变化<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Log.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Log</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Log.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; string &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Log.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* string)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="8-2-while循环"><a href="#8-2-while循环" class="headerlink" title="8.2 while循环"></a>8.2 while循环</h2><p>将刚才的for循环改为while循环<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="8-3-do-while循环"><a href="#8-3-do-while循环" class="headerlink" title="8.3 do-while循环"></a>8.3 do-while循环</h2><p>do while和while的区别就是当条件不满足时，do-while会至少运行一词，而while不会<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure></p><h1 id="9-控制流语句-continue-break-return"><a href="#9-控制流语句-continue-break-return" class="headerlink" title="9.控制流语句(continue,break,return)"></a>9.控制流语句(continue,break,return)</h1><p>控制流语句能让我们更好地进行循环内的语句控制。</p><h2 id="9-1-contiune"><a href="#9-1-contiune" class="headerlink" title="9.1 contiune"></a>9.1 contiune</h2><p>一般用在for和while循环里，如果循环还能执行下一轮，就执行下一轮，否则结束循环。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如下面的代码运行结果就是1和3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>&gt;;i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">continue</span>;</span><br><span class="line">   <span class="built_in">Log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="9-2-break"><a href="#9-2-break" class="headerlink" title="9.2 break"></a>9.2 break</h2><p>用在循环和switch语句里面，直接跳出循环。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如下面的代码运行结果就只有0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>&gt;;i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   <span class="built_in">Log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="9-3-return"><a href="#9-3-return" class="headerlink" title="9.3 return"></a>9.3 return</h2><p>直接完全退出函数，需要根据情况选择返回值。</p><h1 id="10-指针-Pointers"><a href="#10-指针-Pointers" class="headerlink" title="10. 指针(Pointers)"></a>10. 指针(Pointers)</h1><p>指针是一个整数，一个数字，它存储一个内存地址。这一部分我们提到的指针是原始指针(raw pointer)，而非智能指针(smart pointer)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无类型的指针</span></span><br><span class="line"><span class="type">void</span>* ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span>* ptr = <span class="literal">NULL</span>;<span class="comment">//#define 0</span></span><br><span class="line"><span class="type">void</span>* ptr = <span class="literal">nullptr</span>;<span class="comment">//C11最新支持的空指针表达方式</span></span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> var = <span class="number">8</span>;</span><br><span class="line"><span class="type">void</span>* ptr = &amp;var;<span class="comment">//空类型的指针，保存了var的地址</span></span><br><span class="line"><span class="type">double</span>* ptr = (<span class="type">double</span>*)&amp;var; <span class="comment">//指针的数据类型其实不是很重要，只是为了让电脑决定用什么数据类型存地址</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="type">int</span> *ptr = &amp;var;</span><br><span class="line">*ptr = <span class="number">10</span> <span class="comment">//但是在用指针反向引用来改变量的值时，数据类型还是必要的</span></span><br><span class="line"><span class="built_in">Log</span>(var);<span class="comment">//运行结果为10 </span></span><br></pre></td></tr></table></figure><br>指针还有一些骚操作比如双指针<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"><span class="type">char</span>** ptr = &amp;buffer；<span class="comment">//ptr保存了指针buffer的地址</span></span><br><span class="line"><span class="keyword">delete</span>[] buffer;</span><br></pre></td></tr></table></figure></p><h1 id="11-引用-References"><a href="#11-引用-References" class="headerlink" title="11.引用(References)"></a>11.引用(References)</h1><p>引用只是基于指针的一种语法糖，使得代码更易读更好懂而已。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Increment</span><span class="params">(<span class="type">int</span>* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  (*value)++;<span class="comment">//递增运算优先于反向引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = a;<span class="comment">//在变量后加&amp;即可使变量ref和变量a同义</span></span><br><span class="line">ref = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">Log</span>(a); <span class="comment">//结果会是2，同时函数的调用也是一种引用</span></span><br><span class="line"><span class="built_in">Increment</span>(&amp;a);</span><br><span class="line"><span class="built_in">Log</span>(a);<span class="comment">//结果会是3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="12-数组-Array"><a href="#12-数组-Array" class="headerlink" title="12.数组(Array)"></a>12.数组(Array)</h1><h1 id="13-字符串-String"><a href="#13-字符串-String" class="headerlink" title="13.字符串(String)"></a>13.字符串(String)</h1><h1 id="14-字符串字面量-String-Literals"><a href="#14-字符串字面量-String-Literals" class="headerlink" title="14.字符串字面量(String Literals)"></a>14.字符串字面量(String Literals)</h1><h1 id="15-三元运算符-Ternary-Operators"><a href="#15-三元运算符-Ternary-Operators" class="headerlink" title="15.三元运算符(Ternary Operators)"></a>15.三元运算符(Ternary Operators)</h1>]]></content>
      
      
      <categories>
          
          <category> C++编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程--山</title>
      <link href="/2022/08/26/C++%E5%B1%B1/"/>
      <url>/2022/08/26/C++%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C++编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程光速入门--林</title>
      <link href="/2022/08/26/C++%E6%9E%97/"/>
      <url>/2022/08/26/C++%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>本文是油管The Cherno C++的教程笔记，封面画师uid:93134161，画风肃杀冷峻，工业味很浓我很喜欢…</p></div><h1 id="1-类class"><a href="#1-类class" class="headerlink" title="1.类class"></a>1.类class</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>艹，终于到类了，具体的封装特性我就不多提了，总之我们终于来到了oop(面向对象)编程阶段了。<br>简单点来说就是一种把万物都能化作一种数据和函数的集合的编程范式，这些是C语言所不具备的，而C++增加了这些功能<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> x,y</span><br><span class="line"> <span class="type">int</span> speed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   player.x += x * player.spped;</span><br><span class="line">   player.y += y * player.speed;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Player player;</span><br><span class="line">player.x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总之，类的加入让代码变得简洁易读。</p><h2 id="1-2-类与结构体-class-vs-structs"><a href="#1-2-类与结构体-class-vs-structs" class="headerlink" title="1.2 类与结构体(class vs structs)"></a>1.2 类与结构体(class vs structs)</h2><p>类默认下是private的,所以在上面的代码应该加一个public:才能在类的外部调用方法Move。<br>而struct默认就是全部public的。<br>两者的使用方式只能说是非常相似<br>结构体存在的原因就是，C++还在尝试维持与C语言之间的兼容性，因为C语言里没有类。<br>因此，在只有数字得时候使用struct，比如向量类，而在需要使用到继承或者多态特性的时候我们坚决不能用struct<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">const</span> Vector2&amp; other)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       x += other.x;</span><br><span class="line">       y += other.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="1-3类应该怎么写-How-to-Write-a-C-class"><a href="#1-3类应该怎么写-How-to-Write-a-C-class" class="headerlink" title="1.3类应该怎么写(How to Write a C++ class?)"></a>1.3类应该怎么写(How to Write a C++ class?)</h2><p>以log类为例，功能就是在控制台打印各种信息。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LogLevelError = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LogLevelWarning = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LogLevelInfo = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> logLevel = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetLevel</span><span class="params">(<span class="type">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">logLevel = level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logLevel &gt;= LogLevelError)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[ERROR:]&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logLevel &gt;= LogLevelWarning)</span><br><span class="line">std::cout &lt;&lt;<span class="string">&quot;[WARNING:]&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logLevel &gt;= LogLevelInfo)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[Info:]&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Log log;</span><br><span class="line">log.<span class="built_in">SetLevel</span>(log.LogLevelWarning);</span><br><span class="line">log.<span class="built_in">Warn</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">log.<span class="built_in">Info</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">log.<span class="built_in">Error</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>当然这个类的写法不算特别好。</p><h1 id="2-static关键字"><a href="#2-static关键字" class="headerlink" title="2.static关键字"></a>2.static关键字</h1><p>static根据所在的位置不同起到的作用也不同。</p><h2 id="2-1-static修饰全局变量"><a href="#2-1-static修饰全局变量" class="headerlink" title="2.1 static修饰全局变量"></a>2.1 static修饰全局变量</h2><p>表示这个变量在link的时候只在这个编译单元(.obj)里可见，简单点来说就是只能在单一文件中可以被访问<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> C; <span class="comment">//只能在一个文件可以被访问</span></span><br><span class="line"><span class="comment">//全局变量的完整申明方法</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> C; <span class="comment">//多文件编程时，可以实现在不同的文件里访问同一个变量</span></span><br></pre></td></tr></table></figure><br>如果在头文件里使用static，那么就会在两个文件里创建分开的变量。<br>打个比方，通过头文件引用，在main.cpp和fuc.cpp中各定义一个static修饰的int类型，它们的变量名称可以相同，它们两的值可以不同，而且可以通过函数来调用对方文件的改值。</p><h2 id="2-2-static修饰成员变量"><a href="#2-2-static修饰成员变量" class="headerlink" title="2.2 static修饰成员变量"></a>2.2 static修饰成员变量</h2><p>简单点来说static在类或者结构体里的的意思就是，使该类的所有实例共用同一个副本，变一动全部<br><code>同时想要在某个文件里引用，必须要申明该变量</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在创建新的实例的时候不会重新分配内存空间</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x,y;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static变量需要单独申明</span></span><br><span class="line"><span class="type">int</span> Entity::x;</span><br><span class="line"><span class="type">int</span> Entity::t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity e;</span><br><span class="line">e.x = <span class="number">2</span>;</span><br><span class="line">e.y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">Entity e1;</span><br><span class="line">    e1.x = <span class="number">5</span>;</span><br><span class="line">e1.y = <span class="number">8</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 正确写法应该是 </span></span><br><span class="line"><span class="comment"> Entity::x = 5;   </span></span><br><span class="line"><span class="comment"> Entity::y = 8;</span></span><br><span class="line"><span class="comment">而且我们不再需要实例</span></span><br><span class="line"><span class="comment">方法在static修饰后也可以写作</span></span><br><span class="line"><span class="comment"> Entity::Print();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//结果都会是5,8</span></span><br><span class="line">e.<span class="built_in">Print</span>();</span><br><span class="line">e1.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是当变量非静态而方法是静态时情况又不一样，会报错，说没有对于Entity::x的引用<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//非静态变量</span></span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity e;</span><br><span class="line">e.x = <span class="number">2</span>;</span><br><span class="line">e.y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">Entity e1;</span><br><span class="line">    e1.x = <span class="number">5</span>;</span><br><span class="line">e1.y = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">e.<span class="built_in">Print</span>();</span><br><span class="line">e1.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所以正确写法就是,而且本质上和在类外面定义一个函数没有区别<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Print</span><span class="params">(Entity e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout&lt;&lt;e.x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;e.y&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-3-static修饰局部变量-Local-Static"><a href="#2-3-static修饰局部变量-Local-Static" class="headerlink" title="2.3 static修饰局部变量(Local Static)"></a>2.3 static修饰局部变量(Local Static)</h2><p>生命周期：变量实际存在的时间，即在被变量删除之前会存在多久<br>作用域：可以访问这个变量的范围<br>局部变量(Local variable)：函数或者方法里的变量，也可以在if等语句里，即只在”{}”内作用的变量<br>静态局部变量(static local)：生命周期为整个程序的生存期，但是作用域还是只在函数或者方法里。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再次运行到函数的时候，i不会被重新赋值为0</span></span><br><span class="line"><span class="type">void</span> func </span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">   i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-枚举-enum"><a href="#3-枚举-enum" class="headerlink" title="3.枚举(enum)"></a>3.枚举(enum)</h1><p>枚举就是一个整型数组，主要作用就是让代码更简洁。<br>默认是从0开始到n-1，可以在枚举内自定义对应的值<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Wepon</span> : <span class="type">char</span> <span class="comment">//用unsigned char可以节省更多空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内容是0,1,2,9,10</span></span><br><span class="line">sward,archery,bomb = <span class="number">9</span>,axe</span><br><span class="line">&#125;;</span><br><span class="line">Wepon masterSward  = sward；</span><br></pre></td></tr></table></figure></p><h1 id="4-构造函数-Consructors"><a href="#4-构造函数-Consructors" class="headerlink" title="4.构造函数(Consructors)"></a>4.构造函数(Consructors)</h1><p>构造函数就是在类在实例化的时候自动运行的函数，有点像给一个实例赋值的过程(初始化)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> X,Y;</span><br><span class="line"><span class="comment">//C++默认的构造函数，会随机赋值</span></span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Java的数据是会默认初始化为0的，但C++不会</span></span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">X = <span class="number">0.0f</span>;</span><br><span class="line">Y = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数重载</span></span><br><span class="line"><span class="built_in">Entity</span>(<span class="type">float</span> x,<span class="type">float</span> y)</span><br><span class="line">&#123;</span><br><span class="line">       X = x;</span><br><span class="line">   Y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; X &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; Y &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Entity <span class="title">e</span><span class="params">(<span class="number">10.f</span>,<span class="number">5.0f</span>)</span></span>;</span><br><span class="line">e.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除名为Log类的构造函数，使其无法被实例化</span></span><br><span class="line"><span class="built_in">Log</span>() = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure></p><h1 id="5-析构函数-Destructors"><a href="#5-析构函数-Destructors" class="headerlink" title="5.析构函数(Destructors)"></a>5.析构函数(Destructors)</h1><p>与构造函数相反，析构函数与释放内存有关<br>其实就是在实例被销毁时会被自动调用的函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Entity Destoryed&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手动调用析构函数</span></span><br><span class="line">e.~<span class="built_in">Entity</span>();</span><br></pre></td></tr></table></figure></p><h1 id="6-继承-Inheritance"><a href="#6-继承-Inheritance" class="headerlink" title="6.继承(Inheritance)"></a>6.继承(Inheritance)</h1><p>面向对象第二大特性————继承，可以提高我们代码的复用性。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span></span><br></pre></td></tr></table></figure></p><h1 id="7-虚函数-Virtual-Functions"><a href="#7-虚函数-Virtual-Functions" class="headerlink" title="7.虚函数(Virtual Functions)"></a>7.虚函数(Virtual Functions)</h1><h1 id="8-接口-Interfaces"><a href="#8-接口-Interfaces" class="headerlink" title="8.接口(Interfaces)"></a>8.接口(Interfaces)</h1><h1 id="9-可见性-Visibility"><a href="#9-可见性-Visibility" class="headerlink" title="9.可见性(Visibility)"></a>9.可见性(Visibility)</h1><h1 id="10-const关键字"><a href="#10-const关键字" class="headerlink" title="10.const关键字"></a>10.const关键字</h1><h1 id="11-mutable关键字"><a href="#11-mutable关键字" class="headerlink" title="11.mutable关键字"></a>11.mutable关键字</h1><h1 id="12-new关键字"><a href="#12-new关键字" class="headerlink" title="12.new关键字"></a>12.new关键字</h1><h1 id="13-运算符符重载-Operators"><a href="#13-运算符符重载-Operators" class="headerlink" title="13.运算符符重载(Operators)"></a>13.运算符符重载(Operators)</h1>]]></content>
      
      
      <categories>
          
          <category> C++编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程--风</title>
      <link href="/2022/08/26/C++%E7%81%AB/"/>
      <url>/2022/08/26/C++%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C++编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
