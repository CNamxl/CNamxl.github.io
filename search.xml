<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>本站</title>
      <link href="/2023/06/20/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/"/>
      <url>/2023/06/20/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-图床和图片"><a href="#1-图床和图片" class="headerlink" title="1.图床和图片"></a>1.图床和图片</h1><p>本站目前使用的图床是基于github仓库的图床,具体实现方法请参考这个链接：<a href="https://www.fomal.cc/posts/d7fb1ba1.html">https://www.fomal.cc/posts/d7fb1ba1.html</a></p><h1 id="2-文章常用md语法"><a href="#2-文章常用md语法" class="headerlink" title="2.文章常用md语法"></a>2.文章常用md语法</h1>]]></content>
      
      
      <categories>
          
          <category> 备忘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--转</title>
      <link href="/2023/06/09/C#%E8%BD%AC/"/>
      <url>/2023/06/09/C#%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--承</title>
      <link href="/2023/06/09/C#%E6%89%BF/"/>
      <url>/2023/06/09/C#%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--起</title>
      <link href="/2023/06/09/C#%E8%B5%B7/"/>
      <url>/2023/06/09/C#%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--和</title>
      <link href="/2023/06/08/C#%E5%92%8C/"/>
      <url>/2023/06/08/C#%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块 C++版</title>
      <link href="/2023/06/07/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8--%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>/2023/06/07/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8--%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>鉴于最近学习压力很大，暂时居家静养<br>为了让初次学习C++的同学了解俄罗斯方块的美妙，我建议大家去看一部电影中文名《俄罗斯方块》，英文名<br>一年前我通过抄写C#学习在控制台编写了简单的贪吃蛇代码，虽然是简单的抄写但是它确实让我用另外一个视角去理解了整个游戏引擎的架构<br>这一次我将尝试从C++底层去理解C++编程语言在游戏领域的使用方法</p><h1 id="1-步骤一"><a href="#1-步骤一" class="headerlink" title="1 步骤一"></a>1 步骤一</h1><p>打开VS2019，创建新的空项目，并做需求分析<br>模块设计相对简单<br>下面给出类图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏练习项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity动画状态机(1)</title>
      <link href="/2023/05/23/Unity-Animation-2/"/>
      <url>/2023/05/23/Unity-Animation-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Animatior-Controler"><a href="#Animatior-Controler" class="headerlink" title="Animatior Controler"></a>Animatior Controler</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">playerMove</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Animator animator;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> threnshold = <span class="number">0.1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> forwardSpeed = <span class="number">1.5f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> backwardSpeed = <span class="number">1.5f</span>;</span><br><span class="line">    <span class="built_in">float</span> targetSpeed;</span><br><span class="line">    <span class="built_in">float</span> currentSpeed;</span><br><span class="line"></span><br><span class="line">    Vector3 Movement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Move(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentSpeed = Mathf.Lerp(targetSpeed,currentSpeed,<span class="number">0.9f</span>);</span><br><span class="line">        Movement = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,currentSpeed * Time.deltaTime);</span><br><span class="line">        transform.position += Movement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerMove</span>(<span class="params">InputAction.CallbackContext move</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 movement = move.ReadValue&lt;Vector2&gt;();</span><br><span class="line"></span><br><span class="line">        targetSpeed = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">if</span> (movement.y&gt;threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkForward&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            targetSpeed = forwardSpeed * movement.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (movement.y&lt;=threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkForward&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (movement.y &lt; -threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkBackward&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            targetSpeed = backwardSpeed * movement.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (movement.y &gt;= -threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkBackward&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Debug.Log(movement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Blend-Tree"><a href="#Blend-Tree" class="headerlink" title="Blend Tree"></a>Blend Tree</h1>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity动画状态机(1)</title>
      <link href="/2023/05/17/Unity-Animation-1/"/>
      <url>/2023/05/17/Unity-Animation-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一行代码——输入和输出"><a href="#第一行代码——输入和输出" class="headerlink" title="第一行代码——输入和输出"></a>第一行代码——输入和输出</h1><p>游戏对象的功能是由一个个组件组成的，我们可以将Scripts视作一个用户自定义的组件（而mono behavior才是真的定制化组件），游戏的功能的可以看错组件的输出效果<br>创建一个C#脚本，让我们来认识一下C#脚本的基本结构<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用命名空间</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//定义了一个名为hello的类继承自monobehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update（游戏开始第一帧运行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//打印日志信息</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印警告信息</span></span><br><span class="line">        Debug.LogWarning(<span class="string">&quot;This is a Warning!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印报错并使用富文本更改颜色</span></span><br><span class="line">        Debug.LogError(<span class="string">&quot;&lt;color=red&gt;This is Error!&lt;/color&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame（每一帧执行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Debug.Log(&quot;Hello World!&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>以上是输出的部分，下面我们来看输出部分<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//引用input system</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检测按键输入并用不同颜色的日志在控制台输出</span></span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=blue&gt;Pressed Key W&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=red&gt;Pressed Key A&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=green&gt;Pressed Key S&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=yellow&gt;Pressed Key D&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="实现移动和旋转"><a href="#实现移动和旋转" class="headerlink" title="实现移动和旋转"></a>实现移动和旋转</h1><h2 id="移动-Translate"><a href="#移动-Translate" class="headerlink" title="移动 Translate()"></a>移动 Translate()</h2><p>Translate方法是Unity三种移动物体的方法，具体使用方法如下：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.向向量方向移动向量大小的距离</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation</span>)</span>;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, [DefaultValue(<span class="string">&quot;Space.Self&quot;</span></span>)] Space relativeTo)</span>;  </span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, Transform relativeTo</span>)</span>;</span><br><span class="line"><span class="comment">//4.同第一个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z</span>)</span>;</span><br><span class="line"><span class="comment">//5.同第三个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z, Transform relativeTo</span>)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="旋转-Rotate（）"><a href="#旋转-Rotate（）" class="headerlink" title="旋转 Rotate（）"></a>旋转 Rotate（）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span> <span class="comment">//file name  hello inherit form MonoBehaviour class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),<span class="number">-60</span>*Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) , <span class="number">60</span> * Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量-Varaible-和-方法"><a href="#变量-Varaible-和-方法" class="headerlink" title="变量 Varaible 和 方法"></a>变量 Varaible 和 方法</h1><p>四种变量类型<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> = <span class="number">1</span>;                    <span class="comment">//整数类型:整数</span></span><br><span class="line"><span class="built_in">float</span> = <span class="number">1.14f</span>               <span class="comment">//浮点类型:小数，数字后加f</span></span><br><span class="line"><span class="built_in">string</span> = <span class="string">&quot;Hello World!&quot;</span>;    <span class="comment">//字符串类型:可以进行加法操作</span></span><br><span class="line"><span class="built_in">bool</span> = <span class="literal">true</span>                 <span class="comment">//布尔类型:只能是true或false</span></span><br></pre></td></tr></table></figure></p><p>方法就是类里面的代码块作用类似于函数，以下是将刚才的代码用方法简化后的写法<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h1><h1 id="while-和-for-循环"><a href="#while-和-for-循环" class="headerlink" title="while 和 for 循环"></a>while 和 for 循环</h1><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="数组和语法糖-语法糖就是更新的"><a href="#数组和语法糖-语法糖就是更新的" class="headerlink" title="数组和语法糖(语法糖就是更新的)"></a>数组和语法糖(语法糖就是更新的)</h1>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 动画状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shader Graph(1)</title>
      <link href="/2023/04/18/Unity%20Sharer/"/>
      <url>/2023/04/18/Unity%20Sharer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建工程和光照模型"><a href="#1-创建工程和光照模型" class="headerlink" title="1.创建工程和光照模型"></a>1.创建工程和光照模型</h1><p>首先需要明确的一点是Shader Graph支持的管线是URP和HDRP<br>通过PackageManager下载Universial RP和ProjectSettings将项目设置成URP项目或者直接新建URP3D项目<br>在Assets中新建Randering-&gt;URP Assets<br>然后再同文件夹中新建ShaderGraph-&gt;URP-&gt;Lit ShaderGraph<br>双击进入ShaderGraph，左侧菜单是输入属性节点，右侧是Graph属性设置<br>中间区域靠上的是顶点着色器(Vertex)，顶点着色<br>靠下的是片元着色器(Fragment)，给像素指定颜色</p><h1 id="2-基本光照模型"><a href="#2-基本光照模型" class="headerlink" title="2.基本光照模型"></a>2.基本光照模型</h1><p>(1)输入节点</p><div class="table-container"><table><thead><tr><th>变量名</th><th>类型</th><th>变量</th></tr></thead><tbody><tr><td>MainColor</td><td>Color</td><td>颜色</td></tr><tr><td>MainTex</td><td>texture 2D</td><td>纹理</td></tr><tr><td>ColorTint</td><td>float</td><td>色差</td></tr><tr><td>ColorTemp</td><td>float</td><td>色温</td></tr></tbody></table></div><p>(2)节点链接思路</p><p>MainTex与贴图采样节点相连，然后MainColor和贴图采样用Multiply节点做乘法运算，之后传入WhiteBlance(白平衡)节点，在白平衡节点加入ColorTint(色差)和ColorTemp(色温)，最后接入顶点/片元着色器的输入端口</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎渲染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transform</title>
      <link href="/2023/04/09/games101(2)/"/>
      <url>/2023/04/09/games101(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review of Linear Algebra</title>
      <link href="/2023/04/03/games101(1)/"/>
      <url>/2023/04/03/games101(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先，附上课程官网的pdf：<br><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf">https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf</a></p><h1 id="一、Swift-and-Brutal-Introduction-to-Linear-Algebra"><a href="#一、Swift-and-Brutal-Introduction-to-Linear-Algebra" class="headerlink" title="一、Swift and Brutal Introduction to Linear Algebra"></a>一、Swift and Brutal Introduction to Linear Algebra</h1><p>计算机图形学 依赖于：<br>Graphics’Dependencies<br>基础数学（线性代数、微积分、统计等）<br>. Basic mathematics-Linear algebra, calculus,statistics<br>基础物理 （光学、力学等）<br>· Basic physics-Optics,Mechanics<br>信号处理<br>. Misc-Signal processing<br>数值分析<br>-Numerical analysis<br>一点点美学</p><h2 id="Vectors-向量"><a href="#Vectors-向量" class="headerlink" title="Vectors(向量)"></a>Vectors(向量)</h2><p><img src="https://pic3.zhimg.com/v2-5ac76a60cda7c284236879036512bed2_r.jpg" alt="code"></p><ol><li>通常写作<img src="https://pic4.zhimg.com/80/v2-61a2aa8b4acd5a139d49e873e4b2087f_720w.webp" alt="code">或者粗体<strong>a</strong><br>或者使用起止地点的表示<br><img src="https://pic4.zhimg.com/80/v2-c7f0b038dfcd16de89681c0f8bd71a07_720w.webp" alt="code"></li><li>有方向和大小两个特性</li><li>没有绝对的起止点（平移不改变向量的属性，和起始点没有关系）</li><li>向量的模(长度)写作<br><img src="https://pic1.zhimg.com/80/v2-1c838484ed0027582335c98b2b3ab434_720w.webp" alt="code"></li><li>数学表示<br>图形学中，默认以列向量表示：<br><img src="https://pic2.zhimg.com/80/v2-3b34f230fec7f9fca8588c2e1bfd74a1_720w.webp" alt="code"><br>向量a的转置向量表示为：<br><img src="https://pic2.zhimg.com/80/v2-82bd180085d872e495f9c15279f84ff9_720w.webp" alt="code"><br>长度表示为<br><img src="https://pic1.zhimg.com/80/v2-26f6941c25148131902a6d3d55d07af0_720w.webp" alt="code"></li><li>Unit vector(单位向量)<br>A vector with magnitude of 1<br>长度为一的向量<br>Finding the unit vector of a vector (normalization):<br>求某一向量的单位向量（读作a hat）<br><img src="https://pic1.zhimg.com/80/v2-1d15fa766c7f6a61eb8c04379fe377cc_720w.webp" alt="code"><br>Used to represent directions<br>（单位向量）用于表示方向</li></ol><h2 id="Vector-Addition（向量加法）"><a href="#Vector-Addition（向量加法）" class="headerlink" title="Vector Addition（向量加法）"></a>Vector Addition（向量加法）</h2><p>· Geometrically: Parallelogram law &amp; Triangle law<br>几何上：平行四边形和三角形定则<br><img src="https://pic1.zhimg.com/80/v2-21c55298897a952cbdd155832160bcf4_720w.webp" alt="code"><br>· Cartesian Coordinates(笛卡尔坐标系):<br><img src="https://pic1.zhimg.com/80/v2-da834a22c29d33cb5f5ba872b4bfeb90_720w.webp" alt="code"><br>· Algebraically: Simply add coordinates<br>代数上： 将坐标相加<br><img src="https://pic1.zhimg.com/80/v2-e847d1b6040aa6f4bb2a91d2299b5300_720w.webp" alt="code"></p><h2 id="Vector-Multiplication（向量乘法）"><a href="#Vector-Multiplication（向量乘法）" class="headerlink" title="Vector Multiplication（向量乘法）"></a>Vector Multiplication（向量乘法）</h2><h3 id="Dot-product（点乘）"><a href="#Dot-product（点乘）" class="headerlink" title="Dot product（点乘）"></a>Dot product（点乘）</h3><ol><li>点乘<br><img src="https://pic4.zhimg.com/80/v2-eab580803fe1f6273211610d4be9a55b_720w.webp" alt="code"><br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>·对于单位向量<br><img src="https://pic3.zhimg.com/80/v2-69a37a17f21434f5518f282228ea25b2_720w.webp" alt="code"></li><li><p>点乘的性质<br><img src="/img/QQ截图20230408212336.jpg" alt="符合三大运算规律" style="zoom:50%;" /></p></li><li><p>点乘在笛卡尔坐标系中的运算<br>二维 <img src="https://pic1.zhimg.com/80/v2-94ae8d4f5f350810a1fe034a200914dc_720w.webp" alt="code"><br>三维 <img src="https://pic2.zhimg.com/80/v2-59a8a628657f6f4ce3e5e9ce9ae3c571_720w.webp" alt="code"></p></li><li>点乘在图形学的应用<br>(1)计算两向量夹角<br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>(2)计算向量的投影<br><img src="https://pic1.zhimg.com/80/v2-5c0ba4a6cd697717707d15923f7c908c_720w.webp" alt="code"><br>定义 向量b 在 向量a 上的 投影 为 b perp (perpendicular)<br><img src="https://pic3.zhimg.com/80/v2-9f330156dec7d1920ffc813fa7a97c62_720w.webp" alt="code"><br>投影与a保持同向<br><img src="https://pic4.zhimg.com/80/v2-2bebb1af9eb305acbe4a264a5f59fc2f_720w.webp" alt="code"><br>投影大小的计算<br><img src="https://pic1.zhimg.com/80/v2-46fd0a48a8f008c65bc1d316d2c15850_720w.webp" alt="code"><br>(3）计算两向量靠近程度<br>测量两个已知向量方向的靠近程度，这个是由cos 值决定的，越趋近于1值越近<br>(4)计算垂直分量<br><img src="https://pic1.zhimg.com/80/v2-f471d9533ff1b6b2a322364fe05ae590_720w.webp" alt="code"><br>(5)判断两向量前后<br>也由cos决定<br><img src="https://pic1.zhimg.com/80/v2-754c2a7c5df98686b72ec01c4ff678bc_720w.webp" alt="code"><h3 id="Cross-product（叉乘）"><a href="#Cross-product（叉乘）" class="headerlink" title="Cross product（叉乘）"></a>Cross product（叉乘）</h3></li><li>叉乘的定义<br><img src="https://pic1.zhimg.com/80/v2-181fb896a753aabef0bcf0bba2dff03c_720w.webp" alt="code"><br>向量a 叉乘 向量b 产生一个垂直于 向量a 和 向量b 的 向量c，如上图所示，向量c 的 方向 满足 右手定则，大小等于 向量a的长度 乘以 向量b的长度， 再乘以向量c的长度。<pre><code> 叉乘的结果是一个 向量</code></pre>方向：<br><img src="https://pic1.zhimg.com/80/v2-ed6d4661abbced03c0a62ac420729aac_720w.webp" alt="code"><br>向量a x 向量b: 四指指向 第一个向量（向量a），缓慢转向 第二个向量 （向量b），拇指的指向就是a×b的方向，垂直于 向量a 和 向量b 所在的平面。<br>大小：<br><img src="https://pic3.zhimg.com/80/v2-3104558d597ce08de5a0dbf94cbcbb06_720w.webp" alt="code"><br>大小 等于 向量a 和 向量b 构成的四边形 的面积。<br>如下图所示：<br><img src="https://pic4.zhimg.com/80/v2-1fefea7c5b1de5094e71b95ca97e675f_720w.webp" alt="code"></li><li>叉乘有哪些特性？<br>(1)特殊情况，结果为 向量0<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(2)不满足交换律(会导致叉乘方向改变)<br><img src="https://pic3.zhimg.com/80/v2-0ab5ac07eb30e868a38e845b96036ebe_720w.webp" alt="code"><br>(3)满足分配律<br><img src="https://pic1.zhimg.com/80/v2-2863c0439d144ea376d3b43cb0d49f48_720w.webp" alt="code"><br>(4)满足结合律<br><img src="https://pic3.zhimg.com/80/v2-c90bdf8830a338fa32a7697d56c90242_720w.webp" alt="code"></li><li>数学计算方法<br>(1)向量叉乘公式<br><img src="https://pic4.zhimg.com/80/v2-72b8f7d399ad8434d891ef32cd8d79bb_720w.webp" alt="code"><br>(2)坐标系下的矩阵运算<br><img src="https://pic3.zhimg.com/80/v2-05e8f5de403fefbea1be8cea90286a36_720w.webp" alt="code"></li><li>叉乘在计算机图形学上的应用<br>(1)计算两向量夹角<br><img src="https://pic3.zhimg.com/80/v2-a16dcbf8108ac89174c8e1e172dc7c0a_720w.webp" alt="code"><br>(2)判断两向量是否平行<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(3)判断两向量的左右关系<br>θ 逆时针方向为 正<br>sinΘ 在 [ -0.5  Π, 0.5 Π] 之间，<br>Θ &gt; 0时，sinΘ &gt; 0<br>Θ &lt; 0时，sinΘ &lt; 0<br><img src="https://pic4.zhimg.com/80/v2-d83c8536b2b6f0e9b6f14d634025b597_720w.webp" alt="code"><br>由 右手螺旋定则 可以确定： z值 和 sinΘ正负同号<br>z &gt; 0,则 Θ为正，向量a 逆时针旋转到 向量b, a在b的右侧<br>z &lt; 0, 则 Θ为负，向量a 顺时针旋转到 向量b，a在b的左侧</li></ol><p>(4)判断里外关系<br><img src="https://pic2.zhimg.com/80/v2-209630130f10757f550ac5ded25c9325_720w.webp" alt="code"><br>按照上述方法逐个向量叉乘判断z值，判断左右关系，如下图：<br>        只要 所有 z值 正负号同号 就行<br><img src="https://pic2.zhimg.com/80/v2-c22e41df280253415612cf96e71defa5_720w.webp" alt="code"><br>(5)确定一个平面，当叉乘的两个向量垂直时，确定一个坐标系</p><h3 id="Orthonormal-bases-and-coordinate-frames（直角坐标系）"><a href="#Orthonormal-bases-and-coordinate-frames（直角坐标系）" class="headerlink" title="Orthonormal bases and coordinate frames（直角坐标系）"></a>Orthonormal bases and coordinate frames（直角坐标系）</h3><p>假设三个相互垂直的单位向量<br><img src="https://pic3.zhimg.com/80/v2-5a1f7016cdfe73a8105eb3efc1bc519e_720w.webp" alt="code"><br>坐标系内的任意向量可以分解为三个单位向量方向上的投影(projection)<br><img src="https://pic3.zhimg.com/80/v2-44761cdf7697d5adfba537743b5e684e_720w.webp" alt="code"></p><h2 id="Matrix-矩阵"><a href="#Matrix-矩阵" class="headerlink" title="Matrix(矩阵)"></a>Matrix(矩阵)</h2><h3 id="Matrix-Matrix-Multiplication-矩阵-矩阵乘法"><a href="#Matrix-Matrix-Multiplication-矩阵-矩阵乘法" class="headerlink" title="Matrix-Matrix Multiplication(矩阵-矩阵乘法)"></a>Matrix-Matrix Multiplication(矩阵-矩阵乘法)</h3><p>(1)判断两个矩阵是否能乘<br>（MxN）（NxP）=（MxP）<br>(2)计算方法<br>矩阵没有交换律，只有结合律和分配率<br><img src="/img/4.jpg" alt="计算方法" style="zoom:50%;" /></p><h3 id="Matrix-Vector-Multiplication-矩阵-向量乘法"><a href="#Matrix-Vector-Multiplication-矩阵-向量乘法" class="headerlink" title="Matrix-Vector Multiplication(矩阵-向量乘法)"></a>Matrix-Vector Multiplication(矩阵-向量乘法)</h3><p>矩阵向量乘法是变换的重点<br><img src="/img/6.jpg" alt="y轴反转" style="zoom:50%;" /></p><h3 id="Transpose-of-a-Matrix（矩阵的转置）"><a href="#Transpose-of-a-Matrix（矩阵的转置）" class="headerlink" title="Transpose of a Matrix（矩阵的转置）"></a>Transpose of a Matrix（矩阵的转置）</h3><p><img src="/img/5.jpg" alt="转置" style="zoom:50%;" /><br>转置：(AB)T=BT AT</p><h3 id="Identity-Matrix-and-Inverses-单位矩阵与逆"><a href="#Identity-Matrix-and-Inverses-单位矩阵与逆" class="headerlink" title="Identity Matrix and Inverses(单位矩阵与逆)"></a>Identity Matrix and Inverses(单位矩阵与逆)</h3><p>单位矩阵I（对角阵I）：可以算出矩阵A-1(A逆)，可以用于返回变换前的结果<br><img src="/img/3.jpg" alt="单位矩阵和逆的关系" style="zoom:50%;" /></p><h3 id="Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式"><a href="#Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式" class="headerlink" title="Vector multiplication in Matrix form(向量乘法的矩阵形式)"></a>Vector multiplication in Matrix form(向量乘法的矩阵形式)</h3><p>向量的点乘、叉乘都可以转换为矩阵相乘<br>点乘：A·B=ATB<br><img src="/img/1.jpg" alt="矩阵点乘" style="zoom:50%;" /><br>叉乘：AxB=A*B<br><img src="/img/2.jpg" alt="矩阵叉乘" style="zoom:50%;" /></p><h1 id="二、变换"><a href="#二、变换" class="headerlink" title="二、变换"></a>二、变换</h1><h2 id="1-缩放"><a href="#1-缩放" class="headerlink" title="1.缩放"></a>1.缩放</h2><p>Sx：x轴缩放倍率<br>Sy：y轴缩放倍率<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通用公式</span><br><span class="line">| x&#x27; |   | Sx   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0   Sy |   | y |</span><br><span class="line"></span><br><span class="line">//对y轴反转</span><br><span class="line">| x&#x27; |   | -1   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure></p><h2 id="2-斜切"><a href="#2-斜切" class="headerlink" title="2.斜切"></a>2.斜切</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | -1   a |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure><h2 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3.旋转"></a>3.旋转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     | x&#x27; |   | CosΘ   -SinΘ  |   | x |</span><br><span class="line">RΘ = |    | = |               | * |   |</span><br><span class="line">     | y&#x27; |   | SinΘ    CosΘ  |   | y |</span><br></pre></td></tr></table></figure><h2 id="4-平移"><a href="#4-平移" class="headerlink" title="4.平移"></a>4.平移</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | a    b |   | x |   | tx |</span><br><span class="line">|    | = |        | * |   | + |    |</span><br><span class="line">| y&#x27; |   | c    d |   | y |   | ty |</span><br></pre></td></tr></table></figure><h2 id="5-从二维到三维"><a href="#5-从二维到三维" class="headerlink" title="5.从二维到三维"></a>5.从二维到三维</h2><p><img src="" alt="code"></p><h2 id="6-逆变换"><a href="#6-逆变换" class="headerlink" title="6.逆变换"></a>6.逆变换</h2><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><h1 id="作业0"><a href="#作业0" class="headerlink" title="作业0"></a>作业0</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
