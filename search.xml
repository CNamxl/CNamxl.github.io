<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity入门(1)</title>
      <link href="/2023/05/17/Unity-1/"/>
      <url>/2023/05/17/Unity-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一行代码——输入和输出"><a href="#第一行代码——输入和输出" class="headerlink" title="第一行代码——输入和输出"></a>第一行代码——输入和输出</h1><p>游戏对象的功能是由一个个组件组成的，我们可以将Scripts视作一个用户自定义的组件（而mono behavior才是真的定制化组件），游戏的功能的可以看错组件的输出效果<br>创建一个C#脚本，让我们来认识一下C#脚本的基本结构<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用命名空间</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//定义了一个名为hello的类继承自monobehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update（游戏开始第一帧运行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//打印日志信息</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印警告信息</span></span><br><span class="line">        Debug.LogWarning(<span class="string">&quot;This is a Warning!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印报错并使用富文本更改颜色</span></span><br><span class="line">        Debug.LogError(<span class="string">&quot;&lt;color=red&gt;This is Error!&lt;/color&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame（每一帧执行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Debug.Log(&quot;Hello World!&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>以上是输出的部分，下面我们来看输出部分<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//引用input system</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检测按键输入并用不同颜色的日志在控制台输出</span></span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=blue&gt;Pressed Key W&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=red&gt;Pressed Key A&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=green&gt;Pressed Key S&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=yellow&gt;Pressed Key D&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="实现移动和旋转"><a href="#实现移动和旋转" class="headerlink" title="实现移动和旋转"></a>实现移动和旋转</h1><h2 id="移动-Translate"><a href="#移动-Translate" class="headerlink" title="移动 Translate()"></a>移动 Translate()</h2><p>Translate方法是Unity三种移动物体的方法，具体使用方法如下：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.向向量方向移动向量大小的距离</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation</span>)</span>;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, [DefaultValue(<span class="string">&quot;Space.Self&quot;</span></span>)] Space relativeTo)</span>;  </span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, Transform relativeTo</span>)</span>;</span><br><span class="line"><span class="comment">//4.同第一个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z</span>)</span>;</span><br><span class="line"><span class="comment">//5.同第三个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z, Transform relativeTo</span>)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="旋转-Rotate（）"><a href="#旋转-Rotate（）" class="headerlink" title="旋转 Rotate（）"></a>旋转 Rotate（）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),<span class="number">-60</span>*Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) , <span class="number">60</span> * Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量-Varaible"><a href="#变量-Varaible" class="headerlink" title="变量 Varaible"></a>变量 Varaible</h1>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shader Graph(1)</title>
      <link href="/2023/04/18/Unity%20Sharer/"/>
      <url>/2023/04/18/Unity%20Sharer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建工程和光照模型"><a href="#1-创建工程和光照模型" class="headerlink" title="1.创建工程和光照模型"></a>1.创建工程和光照模型</h1><p>首先需要明确的一点是Shader Graph支持的管线是URP和HDRP<br>通过PackageManager下载Universial RP和ProjectSettings将项目设置成URP项目或者直接新建URP3D项目<br>在Assets中新建Randering-&gt;URP Assets<br>然后再同文件夹中新建ShaderGraph-&gt;URP-&gt;Lit ShaderGraph<br>双击进入ShaderGraph，左侧菜单是输入属性节点，右侧是Graph属性设置<br>中间区域靠上的是顶点着色器(Vertex)，顶点着色<br>靠下的是片元着色器(Fragment)，给像素指定颜色</p><h1 id="2-基本光照模型"><a href="#2-基本光照模型" class="headerlink" title="2.基本光照模型"></a>2.基本光照模型</h1><p>(1)输入节点</p><div class="table-container"><table><thead><tr><th>变量名</th><th>类型</th><th>变量</th></tr></thead><tbody><tr><td>MainColor</td><td>Color</td><td>颜色</td></tr><tr><td>MainTex</td><td>texture 2D</td><td>纹理</td></tr><tr><td>ColorTint</td><td>float</td><td>色差</td></tr><tr><td>ColorTemp</td><td>float</td><td>色温</td></tr></tbody></table></div><p>(2)节点链接思路</p><p>MainTex与贴图采样节点相连，然后MainColor和贴图采样用Multiply节点做乘法运算，之后传入WhiteBlance(白平衡)节点，在白平衡节点加入ColorTint(色差)和ColorTemp(色温)，最后接入顶点/片元着色器的输入端口</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎渲染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transform</title>
      <link href="/2023/04/09/games101(2)/"/>
      <url>/2023/04/09/games101(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review of Linear Algebra</title>
      <link href="/2023/04/03/games101(1)/"/>
      <url>/2023/04/03/games101(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先，附上课程官网的pdf：<br><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf">https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf</a></p><h1 id="一、Swift-and-Brutal-Introduction-to-Linear-Algebra"><a href="#一、Swift-and-Brutal-Introduction-to-Linear-Algebra" class="headerlink" title="一、Swift and Brutal Introduction to Linear Algebra"></a>一、Swift and Brutal Introduction to Linear Algebra</h1><p>计算机图形学 依赖于：<br>Graphics’Dependencies<br>基础数学（线性代数、微积分、统计等）<br>. Basic mathematics-Linear algebra, calculus,statistics<br>基础物理 （光学、力学等）<br>· Basic physics-Optics,Mechanics<br>信号处理<br>. Misc-Signal processing<br>数值分析<br>-Numerical analysis<br>一点点美学</p><h2 id="Vectors-向量"><a href="#Vectors-向量" class="headerlink" title="Vectors(向量)"></a>Vectors(向量)</h2><p><img src="https://pic3.zhimg.com/v2-5ac76a60cda7c284236879036512bed2_r.jpg" alt="code"></p><ol><li>通常写作<img src="https://pic4.zhimg.com/80/v2-61a2aa8b4acd5a139d49e873e4b2087f_720w.webp" alt="code">或者粗体<strong>a</strong><br>或者使用起止地点的表示<br><img src="https://pic4.zhimg.com/80/v2-c7f0b038dfcd16de89681c0f8bd71a07_720w.webp" alt="code"></li><li>有方向和大小两个特性</li><li>没有绝对的起止点（平移不改变向量的属性，和起始点没有关系）</li><li>向量的模(长度)写作<br><img src="https://pic1.zhimg.com/80/v2-1c838484ed0027582335c98b2b3ab434_720w.webp" alt="code"></li><li>数学表示<br>图形学中，默认以列向量表示：<br><img src="https://pic2.zhimg.com/80/v2-3b34f230fec7f9fca8588c2e1bfd74a1_720w.webp" alt="code"><br>向量a的转置向量表示为：<br><img src="https://pic2.zhimg.com/80/v2-82bd180085d872e495f9c15279f84ff9_720w.webp" alt="code"><br>长度表示为<br><img src="https://pic1.zhimg.com/80/v2-26f6941c25148131902a6d3d55d07af0_720w.webp" alt="code"></li><li>Unit vector(单位向量)<br>A vector with magnitude of 1<br>长度为一的向量<br>Finding the unit vector of a vector (normalization):<br>求某一向量的单位向量（读作a hat）<br><img src="https://pic1.zhimg.com/80/v2-1d15fa766c7f6a61eb8c04379fe377cc_720w.webp" alt="code"><br>Used to represent directions<br>（单位向量）用于表示方向</li></ol><h2 id="Vector-Addition（向量加法）"><a href="#Vector-Addition（向量加法）" class="headerlink" title="Vector Addition（向量加法）"></a>Vector Addition（向量加法）</h2><p>· Geometrically: Parallelogram law &amp; Triangle law<br>几何上：平行四边形和三角形定则<br><img src="https://pic1.zhimg.com/80/v2-21c55298897a952cbdd155832160bcf4_720w.webp" alt="code"><br>· Cartesian Coordinates(笛卡尔坐标系):<br><img src="https://pic1.zhimg.com/80/v2-da834a22c29d33cb5f5ba872b4bfeb90_720w.webp" alt="code"><br>· Algebraically: Simply add coordinates<br>代数上： 将坐标相加<br><img src="https://pic1.zhimg.com/80/v2-e847d1b6040aa6f4bb2a91d2299b5300_720w.webp" alt="code"></p><h2 id="Vector-Multiplication（向量乘法）"><a href="#Vector-Multiplication（向量乘法）" class="headerlink" title="Vector Multiplication（向量乘法）"></a>Vector Multiplication（向量乘法）</h2><h3 id="Dot-product（点乘）"><a href="#Dot-product（点乘）" class="headerlink" title="Dot product（点乘）"></a>Dot product（点乘）</h3><ol><li>点乘<br><img src="https://pic4.zhimg.com/80/v2-eab580803fe1f6273211610d4be9a55b_720w.webp" alt="code"><br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>·对于单位向量<br><img src="https://pic3.zhimg.com/80/v2-69a37a17f21434f5518f282228ea25b2_720w.webp" alt="code"></li><li><p>点乘的性质<br><img src="/img/QQ截图20230408212336.jpg" alt="符合三大运算规律" style="zoom:50%;" /></p></li><li><p>点乘在笛卡尔坐标系中的运算<br>二维 <img src="https://pic1.zhimg.com/80/v2-94ae8d4f5f350810a1fe034a200914dc_720w.webp" alt="code"><br>三维 <img src="https://pic2.zhimg.com/80/v2-59a8a628657f6f4ce3e5e9ce9ae3c571_720w.webp" alt="code"></p></li><li>点乘在图形学的应用<br>(1)计算两向量夹角<br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>(2)计算向量的投影<br><img src="https://pic1.zhimg.com/80/v2-5c0ba4a6cd697717707d15923f7c908c_720w.webp" alt="code"><br>定义 向量b 在 向量a 上的 投影 为 b perp (perpendicular)<br><img src="https://pic3.zhimg.com/80/v2-9f330156dec7d1920ffc813fa7a97c62_720w.webp" alt="code"><br>投影与a保持同向<br><img src="https://pic4.zhimg.com/80/v2-2bebb1af9eb305acbe4a264a5f59fc2f_720w.webp" alt="code"><br>投影大小的计算<br><img src="https://pic1.zhimg.com/80/v2-46fd0a48a8f008c65bc1d316d2c15850_720w.webp" alt="code"><br>(3）计算两向量靠近程度<br>测量两个已知向量方向的靠近程度，这个是由cos 值决定的，越趋近于1值越近<br>(4)计算垂直分量<br><img src="https://pic1.zhimg.com/80/v2-f471d9533ff1b6b2a322364fe05ae590_720w.webp" alt="code"><br>(5)判断两向量前后<br>也由cos决定<br><img src="https://pic1.zhimg.com/80/v2-754c2a7c5df98686b72ec01c4ff678bc_720w.webp" alt="code"><h3 id="Cross-product（叉乘）"><a href="#Cross-product（叉乘）" class="headerlink" title="Cross product（叉乘）"></a>Cross product（叉乘）</h3></li><li>叉乘的定义<br><img src="https://pic1.zhimg.com/80/v2-181fb896a753aabef0bcf0bba2dff03c_720w.webp" alt="code"><br>向量a 叉乘 向量b 产生一个垂直于 向量a 和 向量b 的 向量c，如上图所示，向量c 的 方向 满足 右手定则，大小等于 向量a的长度 乘以 向量b的长度， 再乘以向量c的长度。<pre><code> 叉乘的结果是一个 向量</code></pre>方向：<br><img src="https://pic1.zhimg.com/80/v2-ed6d4661abbced03c0a62ac420729aac_720w.webp" alt="code"><br>向量a x 向量b: 四指指向 第一个向量（向量a），缓慢转向 第二个向量 （向量b），拇指的指向就是a×b的方向，垂直于 向量a 和 向量b 所在的平面。<br>大小：<br><img src="https://pic3.zhimg.com/80/v2-3104558d597ce08de5a0dbf94cbcbb06_720w.webp" alt="code"><br>大小 等于 向量a 和 向量b 构成的四边形 的面积。<br>如下图所示：<br><img src="https://pic4.zhimg.com/80/v2-1fefea7c5b1de5094e71b95ca97e675f_720w.webp" alt="code"></li><li>叉乘有哪些特性？<br>(1)特殊情况，结果为 向量0<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(2)不满足交换律(会导致叉乘方向改变)<br><img src="https://pic3.zhimg.com/80/v2-0ab5ac07eb30e868a38e845b96036ebe_720w.webp" alt="code"><br>(3)满足分配律<br><img src="https://pic1.zhimg.com/80/v2-2863c0439d144ea376d3b43cb0d49f48_720w.webp" alt="code"><br>(4)满足结合律<br><img src="https://pic3.zhimg.com/80/v2-c90bdf8830a338fa32a7697d56c90242_720w.webp" alt="code"></li><li>数学计算方法<br>(1)向量叉乘公式<br><img src="https://pic4.zhimg.com/80/v2-72b8f7d399ad8434d891ef32cd8d79bb_720w.webp" alt="code"><br>(2)坐标系下的矩阵运算<br><img src="https://pic3.zhimg.com/80/v2-05e8f5de403fefbea1be8cea90286a36_720w.webp" alt="code"></li><li>叉乘在计算机图形学上的应用<br>(1)计算两向量夹角<br><img src="https://pic3.zhimg.com/80/v2-a16dcbf8108ac89174c8e1e172dc7c0a_720w.webp" alt="code"><br>(2)判断两向量是否平行<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(3)判断两向量的左右关系<br>θ 逆时针方向为 正<br>sinΘ 在 [ -0.5  Π, 0.5 Π] 之间，<br>Θ &gt; 0时，sinΘ &gt; 0<br>Θ &lt; 0时，sinΘ &lt; 0<br><img src="https://pic4.zhimg.com/80/v2-d83c8536b2b6f0e9b6f14d634025b597_720w.webp" alt="code"><br>由 右手螺旋定则 可以确定： z值 和 sinΘ正负同号<br>z &gt; 0,则 Θ为正，向量a 逆时针旋转到 向量b, a在b的右侧<br>z &lt; 0, 则 Θ为负，向量a 顺时针旋转到 向量b，a在b的左侧</li></ol><p>(4)判断里外关系<br><img src="https://pic2.zhimg.com/80/v2-209630130f10757f550ac5ded25c9325_720w.webp" alt="code"><br>按照上述方法逐个向量叉乘判断z值，判断左右关系，如下图：<br>        只要 所有 z值 正负号同号 就行<br><img src="https://pic2.zhimg.com/80/v2-c22e41df280253415612cf96e71defa5_720w.webp" alt="code"><br>(5)确定一个平面，当叉乘的两个向量垂直时，确定一个坐标系</p><h3 id="Orthonormal-bases-and-coordinate-frames（直角坐标系）"><a href="#Orthonormal-bases-and-coordinate-frames（直角坐标系）" class="headerlink" title="Orthonormal bases and coordinate frames（直角坐标系）"></a>Orthonormal bases and coordinate frames（直角坐标系）</h3><p>假设三个相互垂直的单位向量<br><img src="https://pic3.zhimg.com/80/v2-5a1f7016cdfe73a8105eb3efc1bc519e_720w.webp" alt="code"><br>坐标系内的任意向量可以分解为三个单位向量方向上的投影(projection)<br><img src="https://pic3.zhimg.com/80/v2-44761cdf7697d5adfba537743b5e684e_720w.webp" alt="code"></p><h2 id="Matrix-矩阵"><a href="#Matrix-矩阵" class="headerlink" title="Matrix(矩阵)"></a>Matrix(矩阵)</h2><h3 id="Matrix-Matrix-Multiplication-矩阵-矩阵乘法"><a href="#Matrix-Matrix-Multiplication-矩阵-矩阵乘法" class="headerlink" title="Matrix-Matrix Multiplication(矩阵-矩阵乘法)"></a>Matrix-Matrix Multiplication(矩阵-矩阵乘法)</h3><p>(1)判断两个矩阵是否能乘<br>（MxN）（NxP）=（MxP）<br>(2)计算方法<br>矩阵没有交换律，只有结合律和分配率<br><img src="/img/4.jpg" alt="计算方法" style="zoom:50%;" /></p><h3 id="Matrix-Vector-Multiplication-矩阵-向量乘法"><a href="#Matrix-Vector-Multiplication-矩阵-向量乘法" class="headerlink" title="Matrix-Vector Multiplication(矩阵-向量乘法)"></a>Matrix-Vector Multiplication(矩阵-向量乘法)</h3><p>矩阵向量乘法是变换的重点<br><img src="/img/6.jpg" alt="y轴反转" style="zoom:50%;" /></p><h3 id="Transpose-of-a-Matrix（矩阵的转置）"><a href="#Transpose-of-a-Matrix（矩阵的转置）" class="headerlink" title="Transpose of a Matrix（矩阵的转置）"></a>Transpose of a Matrix（矩阵的转置）</h3><p><img src="/img/5.jpg" alt="转置" style="zoom:50%;" /><br>转置：(AB)T=BT AT</p><h3 id="Identity-Matrix-and-Inverses-单位矩阵与逆"><a href="#Identity-Matrix-and-Inverses-单位矩阵与逆" class="headerlink" title="Identity Matrix and Inverses(单位矩阵与逆)"></a>Identity Matrix and Inverses(单位矩阵与逆)</h3><p>单位矩阵I（对角阵I）：可以算出矩阵A-1(A逆)，可以用于返回变换前的结果<br><img src="/img/3.jpg" alt="单位矩阵和逆的关系" style="zoom:50%;" /></p><h3 id="Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式"><a href="#Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式" class="headerlink" title="Vector multiplication in Matrix form(向量乘法的矩阵形式)"></a>Vector multiplication in Matrix form(向量乘法的矩阵形式)</h3><p>向量的点乘、叉乘都可以转换为矩阵相乘<br>点乘：A·B=ATB<br><img src="/img/1.jpg" alt="矩阵点乘" style="zoom:50%;" /><br>叉乘：AxB=A*B<br><img src="/img/2.jpg" alt="矩阵叉乘" style="zoom:50%;" /></p><h1 id="二、变换"><a href="#二、变换" class="headerlink" title="二、变换"></a>二、变换</h1><h2 id="1-缩放"><a href="#1-缩放" class="headerlink" title="1.缩放"></a>1.缩放</h2><p>Sx：x轴缩放倍率<br>Sy：y轴缩放倍率<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通用公式</span><br><span class="line">| x&#x27; |   | Sx   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0   Sy |   | y |</span><br><span class="line"></span><br><span class="line">//对y轴反转</span><br><span class="line">| x&#x27; |   | -1   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure></p><h2 id="2-斜切"><a href="#2-斜切" class="headerlink" title="2.斜切"></a>2.斜切</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | -1   a |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure><h2 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3.旋转"></a>3.旋转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     | x&#x27; |   | CosΘ   -SinΘ  |   | x |</span><br><span class="line">RΘ = |    | = |               | * |   |</span><br><span class="line">     | y&#x27; |   | SinΘ    CosΘ  |   | y |</span><br></pre></td></tr></table></figure><h2 id="4-平移"><a href="#4-平移" class="headerlink" title="4.平移"></a>4.平移</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | a    b |   | x |   | tx |</span><br><span class="line">|    | = |        | * |   | + |    |</span><br><span class="line">| y&#x27; |   | c    d |   | y |   | ty |</span><br></pre></td></tr></table></figure><h2 id="5-从二维到三维"><a href="#5-从二维到三维" class="headerlink" title="5.从二维到三维"></a>5.从二维到三维</h2><p><img src="" alt="code"></p><h2 id="6-逆变换"><a href="#6-逆变换" class="headerlink" title="6.逆变换"></a>6.逆变换</h2><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><h1 id="作业0"><a href="#作业0" class="headerlink" title="作业0"></a>作业0</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络（一）</title>
      <link href="/2022/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>本文主要介绍家庭网络接入、路由器和电脑端网络配置，内容源自凌云iot实验室13期学习资料，原作者郭文学</p></div><h1 id="1-家用宽带接入"><a href="#1-家用宽带接入" class="headerlink" title="1.家用宽带接入"></a>1.家用宽带接入</h1><h2 id="1-1互联网的组成"><a href="#1-1互联网的组成" class="headerlink" title="1.1互联网的组成"></a>1.1互联网的组成</h2><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>我们把路由器网络叫做<wavy>LAN(Local Area Network)</wavy>，也就是<wavy>局域网</wavy>，家用设备无线连接到路由器上，路由器通过光纤或者电话线连接在社区机房里，通过机房服务器登录Internet与<br>互联网上的服务器连接。<br>一个小区的局域网可以由多个小的家庭局域网组成，多个小区的局域网一起可以组成广域网<wavy>WAN(Wide Area Network)</wavy>，省级广域网可以组成国家级广域网，各国广域网通过各自的骨干网接入Internet。<br>因此Internet由很多广域网组成，并不属于哪个国家。其中的路由器通过网状架构，经过深层的通信协议进行数据传输，因为这些算法比较复杂，涉及路由器配置，这里不再赘述。<br>ip地址就像是我们的家庭住址一样，一个路由器有两个ip地址，一个是公网ip，一个是内网ip，也叫局域网ip</p><h2 id="1-2modem（猫）"><a href="#1-2modem（猫）" class="headerlink" title="1.2modem（猫）"></a>1.2modem（猫）</h2><p>早期没有光纤时,我们会使用家里的电话线上网。我们知道电话线上传输的是模拟信号,而电脑处理的是数字信号。那计算机上的信号通过电话线发送出去的话.那就需要把数字信号调制成模拟信号(DA转换);同样从电话线上过米的信号我们安把侯拟信号解调成数字信号(AD转换)。那么这个设备我们叫做<wavy>调制解调器(modem,音译为猫)</wavy>。<br>因为电话线上网由于物理带宽限制，ADSL拨号上网最高速率只能到8Mbps(1MBps=8Mbps)。现在更高速率的宽带接入主要是光纤，那么完成光信号到数字信号的调制设备就叫做光猫。</p><h2 id="1-3光猫桥接配置"><a href="#1-3光猫桥接配置" class="headerlink" title="1.3光猫桥接配置"></a>1.3光猫桥接配置</h2><p>大部分的光猫都自带无线路由器功能并且默认开启，但有时候由于信号、性能或其他原因，我们往往不会直接使用光猫来拨号，而是使用自己买的高性能路由器来拨号上网，这时候我们就需要将光猫设置&gt;为桥接模式。<br>在设置光猫工作模式时必须使用超级管理员帐号telecomadmin 登录配置，另外这个密码也只有电信工作人员知道。</p><p>  <img src="/images/pasted-9.png" alt="upload successful"></p><pre><code>                                     admin账号 和 telecomadmin账号</code></pre><h1 id="2-路由器配置"><a href="#2-路由器配置" class="headerlink" title="2.路由器配置"></a>2.路由器配置</h1><h2 id="2-1路由器WAN口拨号配置"><a href="#2-1路由器WAN口拨号配置" class="headerlink" title="2.1路由器WAN口拨号配置"></a>2.1路由器WAN口拨号配置</h2><p><img src="/images/pasted-10.png" alt="upload successful"></p><font size = 4> 一般可以在路由器上找到路由器的ip，默认账号名和密码</font>![upload successful](/images/pasted-11.png)<font size = 4>登录后，就可以看到路由器的配置界面，界面因品牌各异会不同</font><p><img src="/images/pasted-13.png" alt="upload successful"></p><p><font size = 4>在设置中可以找到拨号配置（WAN口设置）</p><p>其中的ip是动态分配的，无法更改，当然，也可高价购买静态ip&lt;/font&gt;<br><img src="/images/pasted-14.png" alt="upload successful"></p><p><font size = 4>局域网ip配置（LAN口设置）</font><br><img src="/images/pasted-15.png" alt="upload successful"></p><h2 id="2-2路由器DHCP配置"><a href="#2-2路由器DHCP配置" class="headerlink" title="2.2路由器DHCP配置"></a>2.2路由器DHCP配置</h2><pre><code>思考：为什么我们新买的计算机不用提前设置便能上网？</code></pre><p><font size = 4>解答：<psw>因为有DHCP协议动态分配ip地址</psw></font><br><img src="/images/pasted-16.png" alt="upload successful"><br> <font size = 4>在Windows系统设置中找到网络适配器，右键属性 WLAN</font><br><img src="/images/pasted-17.png" alt="upload successful"><br> <font size = 4>双击TCP/IPv4</font><br><img src="/images/pasted-18.png" alt="upload successful"></p><p><font size = 4>在自动模式下，电脑都是自动获取ip地址和DNS服务器地址，而自动获取的过程，就需要配置路由器DCHP</font><br><img src="/images/pasted-19.png" alt="upload successful"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>动态主机配置协议 (DHCP) 是由 rfc 1541 (所定义的标准协议，该协议由 RFC 2131) 取代，该协议允许服务器动态地将 IP 地址和配置信息分发给客户端。 通常情况下，DHCP 服务器至少为客户端提供&gt;以下基本信息：<br>·IP 地址</p><p>·子网掩码</p><p>·还可以提供默认的 GatewayOther 信息，例如域名服务 (DNS) 服务器地址和 Windows Internet 名称服务 (WINS) 服务器地址。 系统管理员将 DHCP 服务器配置为向客户端分析的选项。</p><h2 id="2-3用户端网络配置"><a href="#2-3用户端网络配置" class="headerlink" title="2.3用户端网络配置"></a>2.3用户端网络配置</h2><p>简单来说，IP地址严格按照DCHP设置的范围走，DNS可以按自己想用的服务器来<br><img src="/images/pasted-20.png" alt="upload successful"></p><h1 id="3-计算机网络配置"><a href="#3-计算机网络配置" class="headerlink" title="3.计算机网络配置"></a>3.计算机网络配置</h1><h2 id="3-1几个重要概念"><a href="#3-1几个重要概念" class="headerlink" title="3.1几个重要概念"></a>3.1几个重要概念</h2><h3 id="1-IP地址和子网掩码"><a href="#1-IP地址和子网掩码" class="headerlink" title="(1)IP地址和子网掩码"></a>(1)IP地址和子网掩码</h3><p>IP地址和子网掩码做按位的与运算获取的结果就是网络号，两台计算机局域网内能通信的两个充要条件:1，物理上互联;2，两台主机在同一个网段内，即网络号一致。由于我们的计算机都是通过有线或无&gt;线的方式连接路由器上网，所以一般计算机的IP地址要设置得跟路由器的LAN口IP地址在同一个网段内。<br>IP地址的表示方法叫做“点分十进制”，IP地址是32位(4个字节)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">判断是否在同一网段的方法，例如:</span><br><span class="line">ip地址  192.168.2.18</span><br><span class="line">子网掩码 255.255.255.0  255=1+2+4+8+16+32+64+128</span><br><span class="line">ip地址转换为二进制</span><br><span class="line">     192        168        2         18</span><br><span class="line">   1100 0000. 1010 1000. 0000 0010. 0001 0010</span><br><span class="line">   &amp;  1111 1111. 1111 1111. 1111 1111. 0000 0000</span><br><span class="line">      255       255       255         0</span><br><span class="line">----------------------进行与运算-----------------------</span><br><span class="line">   1100 0000. 1010 1000. 0000 0010. 0000 0000</span><br><span class="line">     192        168        2          0</span><br><span class="line">得到的也就是网段，因此默认网关设置因与路由器LAN端口一致</span><br><span class="line"></span><br><span class="line">子网掩码/mask</span><br><span class="line">192.168.2.1/255.255.255.0</span><br><span class="line"></span><br><span class="line">还是以这个ip举例</span><br><span class="line">192.168.2.0      网络号 2^24个</span><br><span class="line">192.168.2.1-254    主机号 254个</span><br><span class="line">192.168.2.255     广播号 1个</span><br></pre></td></tr></table></figure></p><h3 id="2-网关"><a href="#2-网关" class="headerlink" title="(2)网关"></a>(2)网关</h3><p>不在同一个网段内的两台主机如果要互相通信，需要通过路由器来实现数据报文的路由转发。这样我们的计算机在于所有未知的网络通信时都会将数据报文发送给网关，由网关转发出去。所以这里的网关&gt;一般设置为路由器的LAN口IP地址。</p><h3 id="3-DNS"><a href="#3-DNS" class="headerlink" title="(3)DNS"></a>(3)DNS</h3><p>计算机本身只识别IP地址，而不认识baidu.com、iot-yun.com这样的域名。但对于我们人来说不可能记住所有网站的IP地址，却很容易记住iot-yun.com这样的域名。这时候可以通过DNS服务器将域名“iot-yun.com“翻译成相应的IP地址“47.74.239.156”。<br>如果当前DNS查找不到域名，会传到上一级的DNS服务器中查询，全球有13个根DNS服务器（基本在美国，少数在欧洲、日本）</p><h3 id="4-MAC地址"><a href="#4-MAC地址" class="headerlink" title="(4)MAC地址"></a>(4)MAC地址</h3><p>每一张网卡在”出生”时都应该有一个独一无二的MAC地址，它也叫物理地址。就像我们的身份证一样，是网卡的ID。相对于物理MAC地址而言，IP地址也叫做软件地址。<br>MAC地址是48位的，6个字段。</p><h2 id="3-2-ip地址分类"><a href="#3-2-ip地址分类" class="headerlink" title="3.2 ip地址分类"></a>3.2 ip地址分类</h2><p>在linux下可以分别通过route -n和ifconfig，查看ip信息和网卡</p><h3 id="1-私有IP地址"><a href="#1-私有IP地址" class="headerlink" title="(1)私有IP地址"></a>(1)私有IP地址</h3><p>只在路由器的局域网内有效，数据报文无法出现在英特网上。<br>个人设备的私有ip通过NAT技术上网，后续会在路由器原理提到。<br>A类10.0.0.0 — 10.255.255.255     子网掩码:255.0.0.0<br>B类172.16.0.0 — 172.31.255.255    子网掩码:255.255.0.0<br>C类192.168.0.0 — 192.168.255.255   子网掩码:255.255.255.0</p><h3 id="2-特殊IP地址"><a href="#2-特殊IP地址" class="headerlink" title="(2)特殊IP地址"></a>(2)特殊IP地址</h3><p>127.0.0.1(127.0.0.1~127.0.0.255）永远表示本主机的IP地址，主要用<br>于测试。<br>169.254.x.x如果你的主机使用了DHCP功能自动获得一个IP地址，那么说明你的DHCP服务器发生故障<br>0.0.0.0~0.255.255.255 严格说来，0.0.0.0已经不是一个真正意义上的IP地址了。它表示的是这样一个集合:所有不清楚的主机和目的网络。未知的ip数据会让网管ip来处理。</p><h3 id="3-公网IP地址"><a href="#3-公网IP地址" class="headerlink" title="(3)公网IP地址"></a>(3)公网IP地址</h3><p>除了私有IP地址和特殊用途的IP地址为公网IP地址，公网ip很稀有。因为IPv4地址不足的原因，运营商偷偷地加装了NAT设备，而100.72.x.x/100.64.x.x正是用于运营商级NAT内网保留段，所以如果路由器<br>拨号获取的IP地址是该网段，那他也是一个局域网IP地址而非公网IP!</p><h2 id="3-3-网络测试ping命令"><a href="#3-3-网络测试ping命令" class="headerlink" title="3.3 网络测试ping命令"></a>3.3 网络测试ping命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在Windows命令行下输入</span><br><span class="line"><span class="built_in">ping</span> xxx.xxx.xxx.xxx(ip地址)</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-21.png" alt="upload successful"><br>在网络中ping是一个十分强大的TCP/IP工具。我们通常会用它来直接ping IP地址，来测试网络的连通情况:<br>用来检测网络的连通情况和分析网络速度;<br>根据域名得到服务器IP;<br>根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。<br>ping指令遵守ICMP协议，发送的数据包又叫icmp报文。<br>ddos网络攻击的原理之一就是操纵大量设备向服务器发送过量icmp报文是服务器宕机。<br>解决方法：在服务器端建立防火墙</p><h2 id="3-4-开启-关闭DHCP协议"><a href="#3-4-开启-关闭DHCP协议" class="headerlink" title="3.4 开启/关闭DHCP协议"></a>3.4 开启/关闭DHCP协议</h2><kbd>Win</kbd> + <kbd>R</kbd><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//输入指令打开服务</span><br><span class="line">service.msc console</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-23.png" alt="upload successful"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>1，计算机网络故障诊断<br>√如果家里突然断网了，该如何排查故障原因?<br><psw>ping网关，如果通，pingDNS，如果通，那就是运营商出问题或者欠费</psw><br>√如果现在能上QQ，但是就是不能访问网页可能是什么原因?<br><psw>上QQ靠ip，上网页靠DNS，所以是DNS出问题</psw><br>2，恶作剧(欺负身边的小白)<br>√关闭寝室里的路由器DHCP服务试试看?<br><psw>所有人都上不了网，除非自己配ip</psw><br>√关闭身边小白电脑里的DHCP、DNS服务试试看效果?<br><psw>关DHCP上不了网，关DNS能上网无法访问网页</psw><br>√什么是ARP欺骗攻击—Netcut ARP-地址解析协议<br><psw>PC2冒充路由器将错误的MAC地址传给PC1，导致PC1传输给路由器的报文失效，导致断联</psw><br>3，路由器配置<br>如果家里要装宽带，路由器应该如何配置?<br><psw>WAN LAN DNS MAC</psw><br>如果卧室WiFi信号不好，又该如何用路由器级联实现信号全覆盖?<br><psw>让二级路由器的WAN口和上级一致，LAN口不一致即可</psw>                                             </p>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
