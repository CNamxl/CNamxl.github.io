<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《Git与Github——从入门到入土》</title>
      <link href="/2023/07/22/git%20and%20github/"/>
      <url>/2023/07/22/git%20and%20github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h1><h1 id="Git-GUI"><a href="#Git-GUI" class="headerlink" title="Git GUI"></a>Git GUI</h1><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NiloToonURP</title>
      <link href="/2023/07/22/NiloToonURP/"/>
      <url>/2023/07/22/NiloToonURP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Unity-Randering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTS程序设计三大工作口诀</title>
      <link href="/2023/07/21/DOTS%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BD%9C%E5%8F%A3%E8%AF%80/"/>
      <url>/2023/07/21/DOTS%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BD%9C%E5%8F%A3%E8%AF%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>作者：Metaverse大衍神君<br>文章摘自bilibili网站:<a href="https://www.bilibili.com/read/cv25049395?from=search&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/read/cv25049395?from=search&amp;spm_id_from=333.337.0.0</a></p></div><p>DOTS程序设计三大工作口诀<br>设计总在编码前，资源数据不能团，Hybrid,Pure分清楚，想要高效一样难。</p><p>组件要分非与托, Aspect炒一锅，数据划分动与静，结构对齐才干净。</p><p>查询多时用Job，查询少时用Query，随机访问莫滥用，其他方式可不用。</p><p>简单数据CSD，复杂数据封进A，遍历查询定读写，一次查询免间随。</p><p>隐式关系摆前提，更新频率改粒度，结构变化应尽免，通用设计最清楚。</p><p>数据转换看成本，并行串行与同步，读写关系选工具，拥抱迭代才最酷。</p><p>详细解释版本：</p><p>设计总在编码前，资源数据不能团（堆在一起），Hybrid,Pure（模式）分清楚，想要高效一样难。</p><p>组件要分非（托管）与托（管）, Aspect炒一锅（封在一起），数据划分动（态）与静（态），结构对齐才干净（内存/Catch line不浪费）。</p><p>查询多时用Job，查询少时用Query(SystemAPI.Query)，随机访问莫滥用，其他方式可不用(lamda foreach 和手动遍历entitymanger.getallentities)。</p><p>简单数据CSD(Component,ShareComponent, DynamicBuffer)，复杂数据封进A(Aspect)，遍历查询定读写，一次查询免间（接访问）随（机访问）。</p><p>隐式关系摆前提，更新频率改粒度（数据组件拆分粒度），结构变化（Structural Change）应尽免（尽量避免），通用设计最清楚。</p><p>数据转换看成本，并行串行（Job链）与同步（同步点），读写关系选工具，拥抱迭代才最酷。</p><p> 作者：Metaverse大衍神君 </p>]]></content>
      
      
      <categories>
          
          <category> DOTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> “Unity” </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「后日谈」型月Fate系列中与计算机科学/电子信息工程有关的英灵</title>
      <link href="/2023/07/20/%E8%8B%B1%E7%81%B5/"/>
      <url>/2023/07/20/%E8%8B%B1%E7%81%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info simple"><p>本文素材来自于互联网，封面画师Mika Pikazo，这种画风很难不爱ああああああ…</p></div><h1 id="前言——关于型月Fate系列"><a href="#前言——关于型月Fate系列" class="headerlink" title="前言——关于型月Fate系列"></a>前言——关于型月Fate系列</h1><p>TYPE-MOON原作的系列作品<br>Fate（フェイト）是TYPE-MOON原作的系列作品，于2004年1月30日发售的PC平台18禁文字冒险游戏《Fate/stay night》，同时也是TYPE-MOON商业化后初次亮相的作品。由于广受欢迎，吸引了一些作家参与制作，由本篇衍生诸多人气作品。</p><h1 id="尼古拉·特斯拉-我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家"><a href="#尼古拉·特斯拉-我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家" class="headerlink" title="尼古拉·特斯拉(我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家)"></a>尼古拉·特斯拉(我个人心目中最伟大的物理学家，真正意义上以一己之力改变人类历史的物理学家)</h1><p>尼古拉·特斯拉，塞尔维亚裔美国人，美国著名发明家、电气工程师、机械工程师。特斯拉是电气时代电力商业化的重要推进者，主持设计了交流电供发电系统。他是发明了交流发电和供电系统的天才发明家，一生致力于不断的研究，并取得约1000个专利。此外，他也是现代电学、无线通信学的奠基人之一。<br>尼古拉·特斯拉，游戏《Fate/Grand Order》中的5星从者，职阶为Archer，宝具为对城宝具——人类神话·雷电降临。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">FGO中的特斯拉</button></li><li class="tab"><button type="button" data-href="#test1-2">40岁时的特斯拉</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://img.moegirl.org.cn/common/e/ec/%E7%89%B9%E6%96%AF%E6%8B%89%E4%B8%89%E7%A0%B4.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://img.moegirl.org.cn/common/3/37/N.Tesla.jpg" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><div class="table-container"><table><thead><tr><th>条目</th><th>数据</th></tr></thead><tbody><tr><td>本名</td><td>Nikola Tesla</td></tr><tr><td>生日</td><td>1856年7月10日</td></tr><tr><td>出身地区</td><td>奥地利帝国（今克罗地亚）</td></tr><tr><td>活动范围</td><td>奥地利（早年）</td></tr><tr><td></td><td>美国（1884年以后）</td></tr><tr><td>个人状态</td><td>已故</td></tr></tbody></table></div><h2 id="游戏设定"><a href="#游戏设定" class="headerlink" title="游戏设定"></a>游戏设定</h2><p>操控电磁的19、20世纪的天才科学家。毫不含蓄的天才，宣称甚至能斩断星辰。解开了在众多的神话中，被誉为神（自然）之传说的雷电的秘密，给人类文明带来“电力”的伟大学者之一。</p><div class="table-container"><table><thead><tr><th>FGO游戏设定</th><th>数据</th></tr></thead><tbody><tr><td>中文名</td><td>尼古拉·特斯拉</td></tr><tr><td>外文名</td><td>ニコラ・テスラ，Nikola Tesla</td></tr><tr><td>别  名</td><td>祖师爷、钢铁侠、磁暴步兵</td></tr><tr><td>配  音</td><td>稻田彻</td></tr><tr><td>性  别</td><td>男</td></tr><tr><td>登场作品</td><td>《Fate/Grand Order》</td></tr><tr><td>身    高</td><td>190 cm</td></tr><tr><td>体    重</td><td>80 kg</td></tr><tr><td>职    阶</td><td>Archer</td></tr><tr><td>属    性</td><td>混沌·善</td></tr><tr><td>地    域</td><td>欧洲</td></tr><tr><td>出    处</td><td>史实</td></tr><tr><td>星    数</td><td>5</td></tr></tbody></table></div><h2 id="简介-现实中的特斯拉"><a href="#简介-现实中的特斯拉" class="headerlink" title="简介-现实中的特斯拉"></a>简介-现实中的特斯拉</h2><p>年轻时的特斯拉非常的聪明，可以在脑子中飞快地完成复杂计算，老师总认为他在作弊。他能流利地说多种语言。除了克罗地亚语外，他还会说7种语言：捷克语、英语、法语、德语、匈牙利语、意大利语、拉丁语。<br>1893年他展示了小规模无线通讯，并成为了电流之战的赢家之后，就成为了美国最伟大的电子工程师之一而备受尊敬。许多他早期的成果变成现代电子工程的先驱，而且他的许多发现极具开创性和重要性。在公元1943年，美国最高法院承认他为无线电的发明者。以他名字而命名的磁感应强度单位（1 Tesla = 1 Newton / (Amp · Meter) = 10,000 Gauss）更表明他在磁学上的贡献。<br>交流发电机的发明者即是特斯拉，而他除了在电力方面作出了杰出的成就之外，在其他方面的成就也相当惊人。1895年，他与威斯汀豪斯替美国尼亚加拉发电站制造发电机组；1898年，他制造出世界上第一艘无线电遥控船，无线电遥控技术取得专利。这位古怪的发明家还发明了荧光灯、遥控装置、可调机械振动装置、短距离无线电输电装置等。特斯拉开始推理关于用电和磁翘曲空间和时间的可能性，并且想使其能被人们所控制。<br>特斯拉从不在意他的财务状况。如果特斯拉不是被迫放弃了交流电的专利权供世人免费使用（每马力$2.53），那他将会是世界上最富有的人，但他的梦想就是给世界提供用之不竭的能源。他病逝时穷困无依，享年86岁。<br>尼古拉·特斯拉把他的一生都投入到了电磁学的研究。没有尼古拉·特斯拉，科学怪人的形象可能不会像今天这样闪耀。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACGN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课</title>
      <link href="/2023/07/19/DOTS%E5%85%88%E5%AF%BC/"/>
      <url>/2023/07/19/DOTS%E5%85%88%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机科学早期历史"><a href="#计算机科学早期历史" class="headerlink" title="计算机科学早期历史"></a>计算机科学早期历史</h1><h2 id="人類最古の計算裝置"><a href="#人類最古の計算裝置" class="headerlink" title="人類最古の計算裝置"></a>人類最古の計算裝置</h2><p>人类史上公认的第一台计算设备是算盘，于公元前2500年发明于美索不达米亚<br>可以进行加减计算并存储当前的计算状态</p><h2 id="計算設備の大航海時代"><a href="#計算設備の大航海時代" class="headerlink" title="計算設備の大航海時代"></a>計算設備の大航海時代</h2><p>在接下来 4000 年，人类发明了各种巧妙的计算设备，比如星盘，让船只可以在海上计算纬度或计算尺，帮助计算乘法和除法。人们还创造了上百种时钟算日出，潮汐，天体的位置，或纯粹拿来计时。这些设备让原先很费力的事变得更快，更简单，更精确。<br>计算机先驱Charles Babbage（查尔斯·巴贝奇）曾说:<br><div class="note danger simple"><p>随着知识的增长和新工具的诞生，人工劳动力会越来越少</p></div></p><hr><h2 id="“First-Usage-of-computer”"><a href="#“First-Usage-of-computer”" class="headerlink" title="“First Usage of computer”"></a>“First Usage of computer”</h2><p>但是Computer一词最早出现在1613年的一本书里，作者名为Richard Braithwait,他说：<br><div class="note danger simple"><p>随着知识的增长和新工具的诞生，人工劳动力会越来越少</p></div><br>那时, “Computer” 指负责计算的人，”Computer” 偶尔会用机器帮忙，但大部分时候靠自己。这个职位一直到 1800 年代还存在，之后 “Computer” 逐渐开始代表机器。</p><hr><h2 id="步进计算机"><a href="#步进计算机" class="headerlink" title="步进计算机"></a>步进计算机</h2><p>其中”步进计算器”最有名，由德国博学家 戈特弗里德·莱布尼茨 建造于 1694 年。<br>莱布尼茨曾说：<br><div class="note danger simple"><p>“让优秀的人浪费时间算数简直侮辱尊严,农民用机器能算得一样准”</p></div></p><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><p>“步进计算器”有点像汽车里的里程表，不断累加里程数，它有一连串可以转动的齿，每个齿轮有十个齿，代表数字0到9，每当一个齿轮转过 9，它会转回 0，同时让旁边的齿轮前进 1 个齿，就像算盘超过 10 一样。做减法时，机器会反向运作。</p><h3 id="乘除法"><a href="#乘除法" class="headerlink" title="乘除法"></a>乘除法</h3><p>利用一些巧妙的机械结构，步进计算器也能做乘法和除法。乘法和除法 实际上只是多个加法和减法，举例，17除以5，我们只要减5，减5，再减5，直到不能再减 5，就知道了 17=5x3+2，步进计算器 可以自动完成这种操作。<br>它是第一台能做”加减乘除”全部四种运算的机器，它的设计非常成功，以至于沿用了 3 个世纪。</p><hr><h2 id="计算表"><a href="#计算表" class="headerlink" title="计算表"></a>计算表</h2><p>不幸的是，即使有机械计算器，许多现实问题 依然需要很多步，算一个结果可能要几小时甚至几天而且这些手工制作的机器非常昂贵，大部分人买不起。所以在 20 世纪以前，大部分人会用预先算好的计算表。<br>这些计算表由之前说的 “人力计算器” 编撰，如果你想知道 867,5309 的平方根，与其花一整天来手摇 “步进计算器”，你可以花一分钟在表里找答案。<br>速度和准确性在战场上尤为重要，因此军队很早就开始用计算解决复杂问题，如何精确瞄准炮弹是一个很难的问题。19世纪，这些炮弹的射程可以达到 1 公里以上（比半英里多一点），因为风力，温度，大气压力会不断变化，想打中船一样大的物体也非常困难，于是出现了射程表，炮手可以查环境条件和射击距离，然后这张表会告诉他们，角度要设成多少。这些射程表很管用，二战中被广泛应用。<br><img src="https://p0.itc.cn/images01/20211225/099ee4ad0b564033b1890150770f005e.jpeg" alt="code"></p><hr><h2 id="差分机"><a href="#差分机" class="headerlink" title="差分机"></a>差分机</h2><p>问题是如果改了大炮或炮弹的设计，就要算一张新表，这样很耗时而且会出错。Charles Babbage 在 1822 年写了一篇论文，向皇家天文学会指出了这个问题，<br>标题叫： “机械在天文与计算表中的应用”。Charles Babbage 提出了一种新型机械装置叫 “差分机”。<br>一个更复杂的机器，能近似多项式，多项式描述了几个变量之间的关系，比如射程和大气压力，或者 Carrie Anne 要吃多少披萨才开心。多项式也可以用于近似对数和三角函数，这些函数手算相当麻烦。Charles Babbage 在 1823 年开始建造差分机，并在接下来二十年，试图制造和组装 25,000 个零件，总重接近 15 吨。不幸的是，该项目最终放弃了。<br>但在 1991 年，历史学家根据 Charles Babbage 的草稿做了一个差分机而且它还管用！但更重要的是，在差分机的建造期间，Charles Babbage 构想了一个更复杂的机器 - 分析机，不像差分机，步进计算器 和以前的其他计算设备，分析机是 “通用计算机”。它可以做很多事情，不只是一种特定运算；甚至可以给它数据，然后按顺序执行一系列操作；它有内存 甚至一个很原始的打印机，就像差分机，这台机器太超前了，所以没有建成。<br><img src="https://bkimg.cdn.bcebos.com/pic/cb8065380cd79123f000a204ad345982b3b780d9?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UxNTA=,g_7,xp_5,yp_5/format,f_auto" alt="code"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块 C++版</title>
      <link href="/2023/07/09/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8--%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>/2023/07/09/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8--%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#<br>《俄罗斯方块》（俄语：Тетрис，英语：Tetris），是1980年末期至1990年代初期风靡全世界的计算机游戏，是落下型益智游戏的始祖，为苏联在美国发布的娱乐软件。此游戏最初是由阿列克谢·帕基特诺夫(文章封面)在苏联设计和编写，于1984年6月6日首次发布，当时帕基特诺夫正在苏联科学院电算中心工作。此游戏的名称是由希腊语数字四前缀“tetra-”（因所有落下方块皆由四块组成）和帕基特诺夫最喜欢的运动网球（“tennis”）拼接而成。</p><p>此游戏和其续作可于几乎所有电子游戏机和计算机操作系统上游玩，亦可于图形计算器、手提电话、便携式媒体播放器、个人数码助理、互联网无线电设备上游玩，甚至能以彩蛋的形式在非媒体产品上游玩，如示波器。此游戏甚至启发了《俄罗斯方块》餐具。甚至在大楼外墙实现了相应的模式。</p><p>于1980年代，此游戏除了成为一个热门的家用计算机和街机游戏外，还成为Game Boy史上最受欢迎的游戏。《电子游戏月刊》在2007年将此游戏列为“最伟大的100个游戏”中的第1位，并获IGN列为“最伟大的100个游戏”中的第2位。截至2009年，此游戏已售出逾7000万套游戏。于2010年1月，此游戏于手提电话上已售出逾1亿套游戏。</p><p>直到今日，俄罗斯方块是有史以来最畅销的电子游戏。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了让初次学习C++的同学了解俄罗斯方块的美妙，我还建议大家去看一部电影中文名《俄罗斯方块》，英文名 <em>Tetris</em><br>一年前我通过抄写C#学习在控制台编写了简单的贪吃蛇代码，虽然是简单的抄写，但是它确实让我用另外一个视角去理解了整个游戏引擎的架构<br>这一次我将尝试从C++底层去理解C++编程语言在游戏领域的使用方法</p><h1 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h1><p>打开VS2019，创建新的空项目，并做需求分析<br>模块设计相对简单<br>下面给出类图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《DOTS之路》第零-壹节——前导课(1)——DOTS的5W1H问题</title>
      <link href="/2023/07/08/Unity-dots(1)/"/>
      <url>/2023/07/08/Unity-dots(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DOTS是Data-Orinted-Technology-Stack(面向数据的技术栈)的简写<br>DOTS的具体构成如下：</p><ol><li>The C# job system(job包可以帮助开发者利用现代CPU的多核设计特性来处理多线程任务)</li><li>The Burst compiler(Burst包，可以高效编译unity任意代码)</li><li>Unity Mathematics(可以在job system中使用的数学库)</li><li>Unity Collections(常见的集合类型)</li><li>Entities(Entity-Componet System取代GameObject的实体组件系统)</li></ol><p>·Entities.Graphics(Hybrid Renderer)-基于优化CPU(不优化GPU)并且支持URP和HDRP的渲染解决方案<br>·Netcode-网络解决方案<br>·Physics-物理解决方案<br>·Animation-动画解决方案<br>·Audio-音频解决方案</p><p>DOTS应用场景:<br>具有大世界流式加载的游戏<br>具有复杂的大规模模拟的游戏<br>具有多种网络类型的多人连线游戏<br>具有需要客户端模拟预测的网络游戏，如射击游戏</p>]]></content>
      
      
      <categories>
          
          <category> DOTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2022与VScode使用手记</title>
      <link href="/2023/06/21/VS2022%E4%B8%8EVScode%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"/>
      <url>/2023/06/21/VS2022%E4%B8%8EVScode%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>知己知彼，百战不殆 —孙子《孙子兵法·谋攻篇》<br>在开始大批量地编程前，我们最好对自己使用的编程工具有一个比较清晰的认识<br>我将简单通过本文总结一下自己在游戏开发是遇到的IDE快捷键问题，帮助读者快速了解VScode和VS2022两款常用IDE</p><h1 id="VScode部分"><a href="#VScode部分" class="headerlink" title="VScode部分"></a>VScode部分</h1><p>你说得对，但是首先vscode是一个运行于MacOS X、Windows和Linux之上的，针对于编写现代Web和云应用的跨平台源代码编辑器；vscode免费而且功能强大，对JavaScript和NodeJS的支持非常好，自带很多功能，例如代码格式化，代码智能提示补全、Emmet插件等。<br>鉴于本人仅仅使用vscode来维护个人博客和进行一些算法练习，因此不过多介绍vscode的使用方法<br>视频连接:<a href="https://www.youtube.com/watch?v=ifTF3ags0XI">https://www.youtube.com/watch?v=ifTF3ags0XI</a></p><h2 id="CTRL-C"><a href="#CTRL-C" class="headerlink" title="CTRL + C"></a>CTRL + C</h2><p>复制</p><h2 id="CTRL-V"><a href="#CTRL-V" class="headerlink" title="CTRL + V"></a>CTRL + V</h2><p>粘贴</p><h2 id="CTRL-X"><a href="#CTRL-X" class="headerlink" title="CTRL + X"></a>CTRL + X</h2><p>剪切</p><h2 id="CTRL-P"><a href="#CTRL-P" class="headerlink" title="CTRL + P"></a>CTRL + P</h2><p>可以调出command palette（命令面板P）<br>1.可以通过输入搜索想要的文件名<br>2.可以通过输入<strong> &gt; </strong>可以调出能用的大部分指令<br>3.可以通过#后输入驼峰命名法的任意大写字母以得到想要的类与接口</p><h2 id="CTRL-G"><a href="#CTRL-G" class="headerlink" title="CTRL + G"></a>CTRL + G</h2><p>然后输入行号锁定到对应行号</p><h2 id="Shift-←-→"><a href="#Shift-←-→" class="headerlink" title="Shift + ←/→"></a>Shift + ←/→</h2><p>作用可以等同于用鼠标拖动部分文字</p><h2 id="CTRL-←-→"><a href="#CTRL-←-→" class="headerlink" title="CTRL + ←/→"></a>CTRL + ←/→</h2><p>实现单词之间移动</p><h2 id="CTRL-D"><a href="#CTRL-D" class="headerlink" title="CTRL + D"></a>CTRL + D</h2><p>可以实现多行编辑</p><h2 id="ALT-鼠标单击"><a href="#ALT-鼠标单击" class="headerlink" title="ALT + 鼠标单击"></a>ALT + 鼠标单击</h2><p>可以实现多行编辑</p><h2 id="ALT-↑-↓"><a href="#ALT-↑-↓" class="headerlink" title="ALT + ↑/↓"></a>ALT + ↑/↓</h2><p>可以将光标停留的行上下移动</p><h2 id="ALT-SHIFT-↑-↓"><a href="#ALT-SHIFT-↑-↓" class="headerlink" title="ALT + SHIFT + ↑/↓"></a>ALT + SHIFT + ↑/↓</h2><p>一边移动一边复制</p><h2 id="CTRL-L"><a href="#CTRL-L" class="headerlink" title="CTRL + L"></a>CTRL + L</h2><p>逐行高亮代码</p><h2 id="CTRL"><a href="#CTRL" class="headerlink" title="CTRL + /"></a>CTRL + /</h2><p>注释选中代码</p><h2 id="CTRL-K"><a href="#CTRL-K" class="headerlink" title="CTRL + K"></a>CTRL + K</h2><p>清除终端的内容或报错</p><h2 id="CTRL-‘-打开控制台"><a href="#CTRL-‘-打开控制台" class="headerlink" title="CTRL + ‘ 打开控制台"></a>CTRL + ‘ 打开控制台</h2><p>使用命令行进行操作</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h1 id="VS-2022部分"><a href="#VS-2022部分" class="headerlink" title="VS 2022部分"></a>VS 2022部分</h1>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--和</title>
      <link href="/2023/06/01/C#%E5%92%8C/"/>
      <url>/2023/06/01/C#%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity动画状态机(1)</title>
      <link href="/2023/05/23/Unity-Animation-2/"/>
      <url>/2023/05/23/Unity-Animation-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Animatior-Controler"><a href="#Animatior-Controler" class="headerlink" title="Animatior Controler"></a>Animatior Controler</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">playerMove</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Animator animator;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> threnshold = <span class="number">0.1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> forwardSpeed = <span class="number">1.5f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> backwardSpeed = <span class="number">1.5f</span>;</span><br><span class="line">    <span class="built_in">float</span> targetSpeed;</span><br><span class="line">    <span class="built_in">float</span> currentSpeed;</span><br><span class="line"></span><br><span class="line">    Vector3 Movement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Move(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentSpeed = Mathf.Lerp(targetSpeed,currentSpeed,<span class="number">0.9f</span>);</span><br><span class="line">        Movement = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,currentSpeed * Time.deltaTime);</span><br><span class="line">        transform.position += Movement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerMove</span>(<span class="params">InputAction.CallbackContext move</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 movement = move.ReadValue&lt;Vector2&gt;();</span><br><span class="line"></span><br><span class="line">        targetSpeed = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">if</span> (movement.y&gt;threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkForward&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            targetSpeed = forwardSpeed * movement.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (movement.y&lt;=threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkForward&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (movement.y &lt; -threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkBackward&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            targetSpeed = backwardSpeed * movement.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (movement.y &gt;= -threnshold)</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(<span class="string">&quot;WalkBackward&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Debug.Log(movement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Blend-Tree"><a href="#Blend-Tree" class="headerlink" title="Blend Tree"></a>Blend Tree</h1>]]></content>
      
      
      <categories>
          
          <category> Unity-Animation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity动画状态机(1)</title>
      <link href="/2023/05/17/Unity-Animation-1/"/>
      <url>/2023/05/17/Unity-Animation-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一行代码——输入和输出"><a href="#第一行代码——输入和输出" class="headerlink" title="第一行代码——输入和输出"></a>第一行代码——输入和输出</h1><p>游戏对象的功能是由一个个组件组成的，我们可以将Scripts视作一个用户自定义的组件（而mono behavior才是真的定制化组件），游戏的功能的可以看错组件的输出效果<br>创建一个C#脚本，让我们来认识一下C#脚本的基本结构<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用命名空间</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//定义了一个名为hello的类继承自monobehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update（游戏开始第一帧运行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//打印日志信息</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印警告信息</span></span><br><span class="line">        Debug.LogWarning(<span class="string">&quot;This is a Warning!&quot;</span>);</span><br><span class="line">      <span class="comment">//打印报错并使用富文本更改颜色</span></span><br><span class="line">        Debug.LogError(<span class="string">&quot;&lt;color=red&gt;This is Error!&lt;/color&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame（每一帧执行）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Debug.Log(&quot;Hello World!&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>以上是输出的部分，下面我们来看输出部分<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//引用input system</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检测按键输入并用不同颜色的日志在控制台输出</span></span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=blue&gt;Pressed Key W&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=red&gt;Pressed Key A&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=green&gt;Pressed Key S&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;color=yellow&gt;Pressed Key D&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="实现移动和旋转"><a href="#实现移动和旋转" class="headerlink" title="实现移动和旋转"></a>实现移动和旋转</h1><h2 id="移动-Translate"><a href="#移动-Translate" class="headerlink" title="移动 Translate()"></a>移动 Translate()</h2><p>Translate方法是Unity三种移动物体的方法，具体使用方法如下：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.向向量方向移动向量大小的距离</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation</span>)</span>;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, [DefaultValue(<span class="string">&quot;Space.Self&quot;</span></span>)] Space relativeTo)</span>;  </span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector3 translation, Transform relativeTo</span>)</span>;</span><br><span class="line"><span class="comment">//4.同第一个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z</span>)</span>;</span><br><span class="line"><span class="comment">//5.同第三个，只不过将Vecotr3替换为三个float变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y, <span class="built_in">float</span> z, Transform relativeTo</span>)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="旋转-Rotate（）"><a href="#旋转-Rotate（）" class="headerlink" title="旋转 Rotate（）"></a>旋转 Rotate（）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">hello</span> : <span class="title">MonoBehaviour</span> <span class="comment">//file name  hello inherit form MonoBehaviour class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.wKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.aKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),<span class="number">-60</span>*Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.sKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Translate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>) * (<span class="number">5</span> * Time.deltaTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Keyboard.current.dKey.isPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) , <span class="number">60</span> * Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量-Varaible-和-方法"><a href="#变量-Varaible-和-方法" class="headerlink" title="变量 Varaible 和 方法"></a>变量 Varaible 和 方法</h1><p>四种变量类型<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> = <span class="number">1</span>;                    <span class="comment">//整数类型:整数</span></span><br><span class="line"><span class="built_in">float</span> = <span class="number">1.14f</span>               <span class="comment">//浮点类型:小数，数字后加f</span></span><br><span class="line"><span class="built_in">string</span> = <span class="string">&quot;Hello World!&quot;</span>;    <span class="comment">//字符串类型:可以进行加法操作</span></span><br><span class="line"><span class="built_in">bool</span> = <span class="literal">true</span>                 <span class="comment">//布尔类型:只能是true或false</span></span><br></pre></td></tr></table></figure></p><p>方法就是类里面的代码块作用类似于函数，以下是将刚才的代码用方法简化后的写法<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h1><h1 id="while-和-for-循环"><a href="#while-和-for-循环" class="headerlink" title="while 和 for 循环"></a>while 和 for 循环</h1><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="数组和语法糖-语法糖就是更新的"><a href="#数组和语法糖-语法糖就是更新的" class="headerlink" title="数组和语法糖(语法糖就是更新的)"></a>数组和语法糖(语法糖就是更新的)</h1>]]></content>
      
      
      <categories>
          
          <category> Unity-Animation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 动画状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shader Graph(1)</title>
      <link href="/2023/04/18/Unity%20Sharer/"/>
      <url>/2023/04/18/Unity%20Sharer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-创建工程和光照模型"><a href="#1-创建工程和光照模型" class="headerlink" title="1.创建工程和光照模型"></a>1.创建工程和光照模型</h1><p>首先需要明确的一点是Shader Graph支持的管线是URP和HDRP<br>通过PackageManager下载Universial RP和ProjectSettings将项目设置成URP项目或者直接新建URP3D项目<br>在Assets中新建Randering-&gt;URP Assets<br>然后再同文件夹中新建ShaderGraph-&gt;URP-&gt;Lit ShaderGraph<br>双击进入ShaderGraph，左侧菜单是输入属性节点，右侧是Graph属性设置<br>中间区域靠上的是顶点着色器(Vertex)，顶点着色<br>靠下的是片元着色器(Fragment)，给像素指定颜色</p><h1 id="2-基本光照模型"><a href="#2-基本光照模型" class="headerlink" title="2.基本光照模型"></a>2.基本光照模型</h1><p>(1)输入节点</p><div class="table-container"><table><thead><tr><th>变量名</th><th>类型</th><th>变量</th></tr></thead><tbody><tr><td>MainColor</td><td>Color</td><td>颜色</td></tr><tr><td>MainTex</td><td>texture 2D</td><td>纹理</td></tr><tr><td>ColorTint</td><td>float</td><td>色差</td></tr><tr><td>ColorTemp</td><td>float</td><td>色温</td></tr></tbody></table></div><p>(2)节点链接思路</p><p>MainTex与贴图采样节点相连，然后MainColor和贴图采样用Multiply节点做乘法运算，之后传入WhiteBlance(白平衡)节点，在白平衡节点加入ColorTint(色差)和ColorTemp(色温)，最后接入顶点/片元着色器的输入端口</p>]]></content>
      
      
      <categories>
          
          <category> Unity-Randering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transform</title>
      <link href="/2023/04/09/games101(2)/"/>
      <url>/2023/04/09/games101(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Review of Linear Algebra</title>
      <link href="/2023/04/03/games101(1)/"/>
      <url>/2023/04/03/games101(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先，附上课程官网的pdf：<br><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf">https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_02.pdf</a></p><h1 id="一、Swift-and-Brutal-Introduction-to-Linear-Algebra"><a href="#一、Swift-and-Brutal-Introduction-to-Linear-Algebra" class="headerlink" title="一、Swift and Brutal Introduction to Linear Algebra"></a>一、Swift and Brutal Introduction to Linear Algebra</h1><p>计算机图形学 依赖于：<br>Graphics’Dependencies<br>基础数学（线性代数、微积分、统计等）<br>. Basic mathematics-Linear algebra, calculus,statistics<br>基础物理 （光学、力学等）<br>· Basic physics-Optics,Mechanics<br>信号处理<br>. Misc-Signal processing<br>数值分析<br>-Numerical analysis<br>一点点美学</p><h2 id="Vectors-向量"><a href="#Vectors-向量" class="headerlink" title="Vectors(向量)"></a>Vectors(向量)</h2><p><img src="https://pic3.zhimg.com/v2-5ac76a60cda7c284236879036512bed2_r.jpg" alt="code"></p><ol><li>通常写作<img src="https://pic4.zhimg.com/80/v2-61a2aa8b4acd5a139d49e873e4b2087f_720w.webp" alt="code">或者粗体<strong>a</strong><br>或者使用起止地点的表示<br><img src="https://pic4.zhimg.com/80/v2-c7f0b038dfcd16de89681c0f8bd71a07_720w.webp" alt="code"></li><li>有方向和大小两个特性</li><li>没有绝对的起止点（平移不改变向量的属性，和起始点没有关系）</li><li>向量的模(长度)写作<br><img src="https://pic1.zhimg.com/80/v2-1c838484ed0027582335c98b2b3ab434_720w.webp" alt="code"></li><li>数学表示<br>图形学中，默认以列向量表示：<br><img src="https://pic2.zhimg.com/80/v2-3b34f230fec7f9fca8588c2e1bfd74a1_720w.webp" alt="code"><br>向量a的转置向量表示为：<br><img src="https://pic2.zhimg.com/80/v2-82bd180085d872e495f9c15279f84ff9_720w.webp" alt="code"><br>长度表示为<br><img src="https://pic1.zhimg.com/80/v2-26f6941c25148131902a6d3d55d07af0_720w.webp" alt="code"></li><li>Unit vector(单位向量)<br>A vector with magnitude of 1<br>长度为一的向量<br>Finding the unit vector of a vector (normalization):<br>求某一向量的单位向量（读作a hat）<br><img src="https://pic1.zhimg.com/80/v2-1d15fa766c7f6a61eb8c04379fe377cc_720w.webp" alt="code"><br>Used to represent directions<br>（单位向量）用于表示方向</li></ol><h2 id="Vector-Addition（向量加法）"><a href="#Vector-Addition（向量加法）" class="headerlink" title="Vector Addition（向量加法）"></a>Vector Addition（向量加法）</h2><p>· Geometrically: Parallelogram law &amp; Triangle law<br>几何上：平行四边形和三角形定则<br><img src="https://pic1.zhimg.com/80/v2-21c55298897a952cbdd155832160bcf4_720w.webp" alt="code"><br>· Cartesian Coordinates(笛卡尔坐标系):<br><img src="https://pic1.zhimg.com/80/v2-da834a22c29d33cb5f5ba872b4bfeb90_720w.webp" alt="code"><br>· Algebraically: Simply add coordinates<br>代数上： 将坐标相加<br><img src="https://pic1.zhimg.com/80/v2-e847d1b6040aa6f4bb2a91d2299b5300_720w.webp" alt="code"></p><h2 id="Vector-Multiplication（向量乘法）"><a href="#Vector-Multiplication（向量乘法）" class="headerlink" title="Vector Multiplication（向量乘法）"></a>Vector Multiplication（向量乘法）</h2><h3 id="Dot-product（点乘）"><a href="#Dot-product（点乘）" class="headerlink" title="Dot product（点乘）"></a>Dot product（点乘）</h3><ol><li>点乘<br><img src="https://pic4.zhimg.com/80/v2-eab580803fe1f6273211610d4be9a55b_720w.webp" alt="code"><br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>·对于单位向量<br><img src="https://pic3.zhimg.com/80/v2-69a37a17f21434f5518f282228ea25b2_720w.webp" alt="code"></li><li><p>点乘的性质<br><img src="/img/QQ截图20230408212336.jpg" alt="符合三大运算规律" style="zoom:50%;" /></p></li><li><p>点乘在笛卡尔坐标系中的运算<br>二维 <img src="https://pic1.zhimg.com/80/v2-94ae8d4f5f350810a1fe034a200914dc_720w.webp" alt="code"><br>三维 <img src="https://pic2.zhimg.com/80/v2-59a8a628657f6f4ce3e5e9ce9ae3c571_720w.webp" alt="code"></p></li><li>点乘在图形学的应用<br>(1)计算两向量夹角<br><img src="https://pic2.zhimg.com/80/v2-16397d74ac0a368af3e5b6bfea74d495_720w.webp" alt="code"><br>(2)计算向量的投影<br><img src="https://pic1.zhimg.com/80/v2-5c0ba4a6cd697717707d15923f7c908c_720w.webp" alt="code"><br>定义 向量b 在 向量a 上的 投影 为 b perp (perpendicular)<br><img src="https://pic3.zhimg.com/80/v2-9f330156dec7d1920ffc813fa7a97c62_720w.webp" alt="code"><br>投影与a保持同向<br><img src="https://pic4.zhimg.com/80/v2-2bebb1af9eb305acbe4a264a5f59fc2f_720w.webp" alt="code"><br>投影大小的计算<br><img src="https://pic1.zhimg.com/80/v2-46fd0a48a8f008c65bc1d316d2c15850_720w.webp" alt="code"><br>(3）计算两向量靠近程度<br>测量两个已知向量方向的靠近程度，这个是由cos 值决定的，越趋近于1值越近<br>(4)计算垂直分量<br><img src="https://pic1.zhimg.com/80/v2-f471d9533ff1b6b2a322364fe05ae590_720w.webp" alt="code"><br>(5)判断两向量前后<br>也由cos决定<br><img src="https://pic1.zhimg.com/80/v2-754c2a7c5df98686b72ec01c4ff678bc_720w.webp" alt="code"><h3 id="Cross-product（叉乘）"><a href="#Cross-product（叉乘）" class="headerlink" title="Cross product（叉乘）"></a>Cross product（叉乘）</h3></li><li>叉乘的定义<br><img src="https://pic1.zhimg.com/80/v2-181fb896a753aabef0bcf0bba2dff03c_720w.webp" alt="code"><br>向量a 叉乘 向量b 产生一个垂直于 向量a 和 向量b 的 向量c，如上图所示，向量c 的 方向 满足 右手定则，大小等于 向量a的长度 乘以 向量b的长度， 再乘以向量c的长度。<pre><code> 叉乘的结果是一个 向量</code></pre>方向：<br><img src="https://pic1.zhimg.com/80/v2-ed6d4661abbced03c0a62ac420729aac_720w.webp" alt="code"><br>向量a x 向量b: 四指指向 第一个向量（向量a），缓慢转向 第二个向量 （向量b），拇指的指向就是a×b的方向，垂直于 向量a 和 向量b 所在的平面。<br>大小：<br><img src="https://pic3.zhimg.com/80/v2-3104558d597ce08de5a0dbf94cbcbb06_720w.webp" alt="code"><br>大小 等于 向量a 和 向量b 构成的四边形 的面积。<br>如下图所示：<br><img src="https://pic4.zhimg.com/80/v2-1fefea7c5b1de5094e71b95ca97e675f_720w.webp" alt="code"></li><li>叉乘有哪些特性？<br>(1)特殊情况，结果为 向量0<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(2)不满足交换律(会导致叉乘方向改变)<br><img src="https://pic3.zhimg.com/80/v2-0ab5ac07eb30e868a38e845b96036ebe_720w.webp" alt="code"><br>(3)满足分配律<br><img src="https://pic1.zhimg.com/80/v2-2863c0439d144ea376d3b43cb0d49f48_720w.webp" alt="code"><br>(4)满足结合律<br><img src="https://pic3.zhimg.com/80/v2-c90bdf8830a338fa32a7697d56c90242_720w.webp" alt="code"></li><li>数学计算方法<br>(1)向量叉乘公式<br><img src="https://pic4.zhimg.com/80/v2-72b8f7d399ad8434d891ef32cd8d79bb_720w.webp" alt="code"><br>(2)坐标系下的矩阵运算<br><img src="https://pic3.zhimg.com/80/v2-05e8f5de403fefbea1be8cea90286a36_720w.webp" alt="code"></li><li>叉乘在计算机图形学上的应用<br>(1)计算两向量夹角<br><img src="https://pic3.zhimg.com/80/v2-a16dcbf8108ac89174c8e1e172dc7c0a_720w.webp" alt="code"><br>(2)判断两向量是否平行<br><img src="https://pic2.zhimg.com/80/v2-bb74aaf4cae6dde2a181207734c2b2c9_720w.webp" alt="code"><br>(3)判断两向量的左右关系<br>θ 逆时针方向为 正<br>sinΘ 在 [ -0.5  Π, 0.5 Π] 之间，<br>Θ &gt; 0时，sinΘ &gt; 0<br>Θ &lt; 0时，sinΘ &lt; 0<br><img src="https://pic4.zhimg.com/80/v2-d83c8536b2b6f0e9b6f14d634025b597_720w.webp" alt="code"><br>由 右手螺旋定则 可以确定： z值 和 sinΘ正负同号<br>z &gt; 0,则 Θ为正，向量a 逆时针旋转到 向量b, a在b的右侧<br>z &lt; 0, 则 Θ为负，向量a 顺时针旋转到 向量b，a在b的左侧</li></ol><p>(4)判断里外关系<br><img src="https://pic2.zhimg.com/80/v2-209630130f10757f550ac5ded25c9325_720w.webp" alt="code"><br>按照上述方法逐个向量叉乘判断z值，判断左右关系，如下图：<br>        只要 所有 z值 正负号同号 就行<br><img src="https://pic2.zhimg.com/80/v2-c22e41df280253415612cf96e71defa5_720w.webp" alt="code"><br>(5)确定一个平面，当叉乘的两个向量垂直时，确定一个坐标系</p><h3 id="Orthonormal-bases-and-coordinate-frames（直角坐标系）"><a href="#Orthonormal-bases-and-coordinate-frames（直角坐标系）" class="headerlink" title="Orthonormal bases and coordinate frames（直角坐标系）"></a>Orthonormal bases and coordinate frames（直角坐标系）</h3><p>假设三个相互垂直的单位向量<br><img src="https://pic3.zhimg.com/80/v2-5a1f7016cdfe73a8105eb3efc1bc519e_720w.webp" alt="code"><br>坐标系内的任意向量可以分解为三个单位向量方向上的投影(projection)<br><img src="https://pic3.zhimg.com/80/v2-44761cdf7697d5adfba537743b5e684e_720w.webp" alt="code"></p><h2 id="Matrix-矩阵"><a href="#Matrix-矩阵" class="headerlink" title="Matrix(矩阵)"></a>Matrix(矩阵)</h2><h3 id="Matrix-Matrix-Multiplication-矩阵-矩阵乘法"><a href="#Matrix-Matrix-Multiplication-矩阵-矩阵乘法" class="headerlink" title="Matrix-Matrix Multiplication(矩阵-矩阵乘法)"></a>Matrix-Matrix Multiplication(矩阵-矩阵乘法)</h3><p>(1)判断两个矩阵是否能乘<br>（MxN）（NxP）=（MxP）<br>(2)计算方法<br>矩阵没有交换律，只有结合律和分配率<br><img src="/img/4.jpg" alt="计算方法" style="zoom:50%;" /></p><h3 id="Matrix-Vector-Multiplication-矩阵-向量乘法"><a href="#Matrix-Vector-Multiplication-矩阵-向量乘法" class="headerlink" title="Matrix-Vector Multiplication(矩阵-向量乘法)"></a>Matrix-Vector Multiplication(矩阵-向量乘法)</h3><p>矩阵向量乘法是变换的重点<br><img src="/img/6.jpg" alt="y轴反转" style="zoom:50%;" /></p><h3 id="Transpose-of-a-Matrix（矩阵的转置）"><a href="#Transpose-of-a-Matrix（矩阵的转置）" class="headerlink" title="Transpose of a Matrix（矩阵的转置）"></a>Transpose of a Matrix（矩阵的转置）</h3><p><img src="/img/5.jpg" alt="转置" style="zoom:50%;" /><br>转置：(AB)T=BT AT</p><h3 id="Identity-Matrix-and-Inverses-单位矩阵与逆"><a href="#Identity-Matrix-and-Inverses-单位矩阵与逆" class="headerlink" title="Identity Matrix and Inverses(单位矩阵与逆)"></a>Identity Matrix and Inverses(单位矩阵与逆)</h3><p>单位矩阵I（对角阵I）：可以算出矩阵A-1(A逆)，可以用于返回变换前的结果<br><img src="/img/3.jpg" alt="单位矩阵和逆的关系" style="zoom:50%;" /></p><h3 id="Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式"><a href="#Vector-multiplication-in-Matrix-form-向量乘法的矩阵形式" class="headerlink" title="Vector multiplication in Matrix form(向量乘法的矩阵形式)"></a>Vector multiplication in Matrix form(向量乘法的矩阵形式)</h3><p>向量的点乘、叉乘都可以转换为矩阵相乘<br>点乘：A·B=ATB<br><img src="/img/1.jpg" alt="矩阵点乘" style="zoom:50%;" /><br>叉乘：AxB=A*B<br><img src="/img/2.jpg" alt="矩阵叉乘" style="zoom:50%;" /></p><h1 id="二、变换"><a href="#二、变换" class="headerlink" title="二、变换"></a>二、变换</h1><h2 id="1-缩放"><a href="#1-缩放" class="headerlink" title="1.缩放"></a>1.缩放</h2><p>Sx：x轴缩放倍率<br>Sy：y轴缩放倍率<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//通用公式</span><br><span class="line">| x&#x27; |   | Sx   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0   Sy |   | y |</span><br><span class="line"></span><br><span class="line">//对y轴反转</span><br><span class="line">| x&#x27; |   | -1   0 |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure></p><h2 id="2-斜切"><a href="#2-斜切" class="headerlink" title="2.斜切"></a>2.斜切</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | -1   a |   | x |</span><br><span class="line">|    | = |        | * |   |</span><br><span class="line">| y&#x27; |   | 0    1 |   | y |</span><br></pre></td></tr></table></figure><h2 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3.旋转"></a>3.旋转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     | x&#x27; |   | CosΘ   -SinΘ  |   | x |</span><br><span class="line">RΘ = |    | = |               | * |   |</span><br><span class="line">     | y&#x27; |   | SinΘ    CosΘ  |   | y |</span><br></pre></td></tr></table></figure><h2 id="4-平移"><a href="#4-平移" class="headerlink" title="4.平移"></a>4.平移</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| x&#x27; |   | a    b |   | x |   | tx |</span><br><span class="line">|    | = |        | * |   | + |    |</span><br><span class="line">| y&#x27; |   | c    d |   | y |   | ty |</span><br></pre></td></tr></table></figure><h2 id="5-从二维到三维"><a href="#5-从二维到三维" class="headerlink" title="5.从二维到三维"></a>5.从二维到三维</h2><p><img src="" alt="code"></p><h2 id="6-逆变换"><a href="#6-逆变换" class="headerlink" title="6.逆变换"></a>6.逆变换</h2><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><h1 id="作业0"><a href="#作业0" class="headerlink" title="作业0"></a>作业0</h1>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本站运营备忘录</title>
      <link href="/2022/12/01/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/"/>
      <url>/2022/12/01/%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、图床和图片"><a href="#一、图床和图片" class="headerlink" title="一、图床和图片"></a>一、图床和图片</h1><p>本站目前使用的图床是基于github仓库的图床,具体实现方法请参考这个链接:<a href="https://www.fomal.cc/posts/d7fb1ba1.html">https://www.fomal.cc/posts/d7fb1ba1.html</a><br>根据网站博主的教程，在github创建图床仓库后，可以通过如下指令将已有的图床下载到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:用户名/图床名.git</span><br></pre></td></tr></table></figure><br>更新图床的具体步骤就是将要更新的图片放入相应文件夹中，然后在bash中输入如下命令就可以更新图床<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add </span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><h2 id="在线图片和本地图片"><a href="#在线图片和本地图片" class="headerlink" title="在线图片和本地图片"></a>在线图片和本地图片</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://p0.itc.cn/images01/20211225/099ee4ad0b564033b1890150770f005e.jpeg</span>)</span><br></pre></td></tr></table></figure><h1 id="二、文章常用md语法"><a href="#二、文章常用md语法" class="headerlink" title="二、文章常用md语法"></a>二、文章常用md语法</h1><p>请参考此链接:<a href="https://blog.csdn.net/u014061630/article/details/81359144">https://blog.csdn.net/u014061630/article/details/81359144</a></p><h2 id="1-hexo自带语法"><a href="#1-hexo自带语法" class="headerlink" title="1.hexo自带语法"></a>1.hexo自带语法</h2><h3 id="1-1-文本格式"><a href="#1-1-文本格式" class="headerlink" title="1.1 文本格式"></a>1.1 文本格式</h3><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">代码格式</button></li><li class="tab"><button type="button" data-href="#test4-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line">&lt;font size = 5&gt;5号字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=blue&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;这里的背景色是：MistyRosen，此处输入任意想输入的内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h2><h3 id="表单用法"><a href="#表单用法" class="headerlink" title="表单用法"></a>表单用法</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="行内文本"><a href="#行内文本" class="headerlink" title="行内文本"></a>行内文本</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码格式</button></li><li class="tab"><button type="button" data-href="#-2">渲染效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-修改条目专用格式"><a href="#3-修改条目专用格式" class="headerlink" title="3.修改条目专用格式"></a>3.修改条目专用格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs  %&#125;</span><br><span class="line">&lt;!-- tab 代码格式 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 渲染效果 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><h1 id="三、更新友链的方法"><a href="#三、更新友链的方法" class="headerlink" title="三、更新友链的方法"></a>三、更新友链的方法</h1><ol><li>获取网站图标,在大部分网站url后边加上即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/favicon.ico</span><br></pre></td></tr></table></figure></li><li>获取网站缩略图的方法<br>截图可以做到（目前使用）<br>PHP可以做到<br>原有的捷径木有喽Kira~☆</li></ol><h1 id="四、本人邮箱"><a href="#四、本人邮箱" class="headerlink" title="四、本人邮箱"></a>四、本人邮箱</h1><p>网易：lmh983898216@163.com<br>腾讯QQ：983898216@qq.com<br>谷歌邮箱：lmh983898216@gmail.com（目前被停用）<br>备用邮箱：cnamxl@proton.me（不常用）</p>]]></content>
      
      
      <categories>
          
          <category> 基本素养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--转</title>
      <link href="/2022/03/01/C#%E8%BD%AC/"/>
      <url>/2022/03/01/C#%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--承</title>
      <link href="/2022/01/01/C#%E6%89%BF/"/>
      <url>/2022/01/01/C#%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vs2019篇"><a href="#Vs2019篇" class="headerlink" title="Vs2019篇"></a>Vs2019篇</h1><h1 id="VScode篇"><a href="#VScode篇" class="headerlink" title="VScode篇"></a>VScode篇</h1>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#编程入门--起</title>
      <link href="/2021/12/01/C#%E8%B5%B7/"/>
      <url>/2021/12/01/C#%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
